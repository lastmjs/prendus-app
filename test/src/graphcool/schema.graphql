enum _ModelMutationType {
  CREATED
  UPDATED
  DELETED
}

# Meta information about the query.
type _QueryMeta {
  count: Int!
}

# AddLTIUserPayload
type AddLTIUserPayload {
  id: ID!
}

type AddToAssignmentOnConceptsPayload {
  assignmentsAssignment: Assignment
  conceptsConcept: Concept
}

type AddToAssignmentOnPrendusAnalyticsPayload {
  assignmentAssignment: Assignment
  analyticsPrendusAnalytics: PrendusAnalytics
}

type AddToAssignmentQuestionsPayload {
  assignmentAssignment: Assignment
  questionsQuestion: Question
}

type AddToAuthorOnAssignmentPayload {
  authorUser: User
  ownedAssignmentsAssignment: Assignment
}

type AddToAuthorOnCoursePayload {
  authorUser: User
  ownedCoursesCourse: Course
}

type AddToAuthorOnQuestionPayload {
  authorUser: User
  ownedQuestionsQuestion: Question
}

type AddToAuthorOnQuestionResponsePayload {
  authorUser: User
  ownedQuestionResponsesQuestionResponse: QuestionResponse
}

type AddToAuthorOnQuizPayload {
  authorUser: User
  ownedQuizzesQuiz: Quiz
}

type AddToConceptOnQuestionPayload {
  questionsQuestion: Question
  conceptConcept: Concept
}

type AddToCourseDisciplinePayload {
  coursesCourse: Course
  disciplineDiscipline: Discipline
}

type AddToCourseOnAssignmentPayload {
  courseCourse: Course
  assignmentsAssignment: Assignment
}

type AddToCourseOnPrendusAnalyticsPayload {
  courseCourse: Course
  analyticsPrendusAnalytics: PrendusAnalytics
}

type AddToCoursePurchasedPayload {
  courseCourse: Course
  purchasesPurchase: Purchase
}

type AddToCourseSubjectPayload {
  coursesCourse: Course
  subjectSubject: Subject
}

type AddToDisciplineOnSubjectPayload {
  disciplineDiscipline: Discipline
  subjectsSubject: Subject
}

type AddToFlagOnQuestionPayload {
  questionQuestion: Question
  flagsQuestionFlag: QuestionFlag
}

type AddToImagesOnQuestionsPayload {
  imagesFile: File
  questionQuestion: Question
}

type AddToQuestionOnAnswerCommentPayload {
  questionQuestion: Question
  answerCommentsAnswerComment: AnswerComment
}

type AddToQuestionOnPrendusAnalyticsPayload {
  questionQuestion: Question
  analyticsPrendusAnalytics: PrendusAnalytics
}

type AddToQuestionOnQuestionRatingPayload {
  questionQuestion: Question
  ratingsQuestionRating: QuestionRating
}

type AddToQuestionOnQuestionResponsePayload {
  questionQuestion: Question
  responsesQuestionResponse: QuestionResponse
}

type AddToQuizOnQuestionPayload {
  quizQuiz: Quiz
  questionsQuestion: Question
}

type AddToRaterOnQuestionRatingPayload {
  raterUser: User
  questionRatingsQuestionRating: QuestionRating
}

type AddToRaterOnQuestionResponseRatingPayload {
  raterUser: User
  ownedQuestionResponseRatingsQuestionResponseRating: QuestionResponseRating
}

type AddToRatingsOnQuestionResponsePayload {
  questionResponseQuestionResponse: QuestionResponse
  ratingsQuestionResponseRating: QuestionResponseRating
}

type AddToScoresOnQuestionRatingPayload {
  questionRatingQuestionRating: QuestionRating
  scoresCategoryScore: CategoryScore
}

type AddToScoresOnQuestionResponseRatingPayload {
  questionResponseRatingQuestionResponseRating: QuestionResponseRating
  scoresCategoryScore: CategoryScore
}

type AddToStudentsAndCoursesPayload {
  enrolledStudentsUser: User
  enrolledCoursesCourse: Course
}

type AddToSubjectOnConceptPayload {
  subjectSubject: Subject
  conceptsConcept: Concept
}

type AddToUserChecksOnQuestionResponsePayload {
  questionResponseQuestionResponse: QuestionResponse
  userChecksUserCheck: UserCheck
}

type AddToUserEssaysOnQuestionResponsePayload {
  questionResponseQuestionResponse: QuestionResponse
  userEssaysUserEssay: UserEssay
}

type AddToUserInputsOnQuestionResponsePayload {
  questionResponseQuestionResponse: QuestionResponse
  userInputsUserInput: UserInput
}

type AddToUserOnLTIUserPayload {
  userUser: User
  ltiUsersLTIUser: LTIUser
}

type AddToUserOnPrendusAnalyticsPayload {
  userUser: User
  userAnalyticsPrendusAnalytics: PrendusAnalytics
}

type AddToUserPurchasesPayload {
  userUser: User
  purchasesPurchase: Purchase
}

type AddToUserRadiosOnQuestionResponsePayload {
  questionResponseQuestionResponse: QuestionResponse
  userRadiosUserRadio: UserRadio
}

type AddToUserVariablesOnQuestionResponsePayload {
  questionResponseQuestionResponse: QuestionResponse
  userVariablesUserVariable: UserVariable
}

type AnswerComment implements Node {
  createdAt: DateTime!
  id: ID!
  question(filter: QuestionFilter): Question!
  text: String!
  updatedAt: DateTime!
}

input AnswerCommentFilter {
  # Logical AND on all given filters.
  AND: [AnswerCommentFilter!]

  # Logical OR on all given filters.
  OR: [AnswerCommentFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  text: String

  # All values that are not equal to given value.
  text_not: String

  # All values that are contained in given list.
  text_in: [String!]

  # All values that are not contained in given list.
  text_not_in: [String!]

  # All values less than the given value.
  text_lt: String

  # All values less than or equal the given value.
  text_lte: String

  # All values greater than the given value.
  text_gt: String

  # All values greater than or equal the given value.
  text_gte: String

  # All values containing the given string.
  text_contains: String

  # All values not containing the given string.
  text_not_contains: String

  # All values starting with the given string.
  text_starts_with: String

  # All values not starting with the given string.
  text_not_starts_with: String

  # All values ending with the given string.
  text_ends_with: String

  # All values not ending with the given string.
  text_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  question: QuestionFilter
}

enum AnswerCommentOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AnswerCommentPreviousValues {
  createdAt: DateTime!
  id: ID!
  text: String!
  updatedAt: DateTime!
}

input AnswerCommentquestionQuestion {
  code: String!
  conceptAlignment: Int
  difficulty: Int
  explanation: String
  inclusion: Int
  language: Int
  learningCategory: Int
  overall: Int
  plagiarism: Int
  resource: String
  text: String!
  visibility: QuestionVisibility
  assignmentId: ID
  assignment: QuestionassignmentAssignment
  authorId: ID
  author: QuestionauthorUser
  conceptId: ID
  concept: QuestionconceptConcept
  quizId: ID
  quiz: QuestionquizQuiz
  analyticsIds: [ID!]
  analytics: [QuestionanalyticsPrendusAnalytics!]
  answerCommentsIds: [ID!]
  answerComments: [QuestionanswerCommentsAnswerComment!]
  flagsIds: [ID!]
  flags: [QuestionflagsQuestionFlag!]
  imagesIds: [ID!]
  images: [QuestionimagesFile!]
  ratingsIds: [ID!]
  ratings: [QuestionratingsQuestionRating!]
  responsesIds: [ID!]
  responses: [QuestionresponsesQuestionResponse!]
}

input AnswerCommentSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [AnswerCommentSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [AnswerCommentSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: AnswerCommentSubscriptionFilterNode
}

input AnswerCommentSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  text: String

  # All values that are not equal to given value.
  text_not: String

  # All values that are contained in given list.
  text_in: [String!]

  # All values that are not contained in given list.
  text_not_in: [String!]

  # All values less than the given value.
  text_lt: String

  # All values less than or equal the given value.
  text_lte: String

  # All values greater than the given value.
  text_gt: String

  # All values greater than or equal the given value.
  text_gte: String

  # All values containing the given string.
  text_contains: String

  # All values not containing the given string.
  text_not_contains: String

  # All values starting with the given string.
  text_starts_with: String

  # All values not starting with the given string.
  text_not_starts_with: String

  # All values ending with the given string.
  text_ends_with: String

  # All values not ending with the given string.
  text_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  question: QuestionFilter
}

type AnswerCommentSubscriptionPayload {
  mutation: _ModelMutationType!
  node: AnswerComment
  updatedFields: [String!]
  previousValues: AnswerCommentPreviousValues
}

type Assignment implements Node {
  analytics(filter: PrendusAnalyticsFilter, orderBy: PrendusAnalyticsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PrendusAnalytics!]
  author(filter: UserFilter): User!
  concepts(filter: ConceptFilter, orderBy: ConceptOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  course(filter: CourseFilter): Course
  createdAt: DateTime!
  id: ID!
  numCreateQuestions: Int!
  numGradeResponses: Int!
  numResponseQuestions: Int!
  numReviewQuestions: Int!
  questions(filter: QuestionFilter, orderBy: QuestionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  questionType: QuestionType!
  quiz(filter: QuizFilter): Quiz
  title: String!
  updatedAt: DateTime!

  # Meta information about the query.
  _analyticsMeta(filter: PrendusAnalyticsFilter, orderBy: PrendusAnalyticsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _conceptsMeta(filter: ConceptFilter, orderBy: ConceptOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _questionsMeta(filter: QuestionFilter, orderBy: QuestionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input AssignmentanalyticsPrendusAnalytics {
  contextId: String
  contextType: ContextType
  object: String
  verb: String!
  courseId: ID
  course: PrendusAnalyticscourseCourse
  questionId: ID
  question: PrendusAnalyticsquestionQuestion
  userId: ID
  user: PrendusAnalyticsuserUser
}

input AssignmentauthorUser {
  email: String
  password: String
  role: UserRole
  enrolledCoursesIds: [ID!]
  enrolledCourses: [UserenrolledCoursesCourse!]
  ltiUsersIds: [ID!]
  ltiUsers: [UserltiUsersLTIUser!]
  ownedAssignmentsIds: [ID!]
  ownedAssignments: [UserownedAssignmentsAssignment!]
  ownedCoursesIds: [ID!]
  ownedCourses: [UserownedCoursesCourse!]
  ownedQuestionResponseRatingsIds: [ID!]
  ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!]
  ownedQuestionResponsesIds: [ID!]
  ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!]
  ownedQuestionsIds: [ID!]
  ownedQuestions: [UserownedQuestionsQuestion!]
  ownedQuizzesIds: [ID!]
  ownedQuizzes: [UserownedQuizzesQuiz!]
  purchasesIds: [ID!]
  purchases: [UserpurchasesPurchase!]
  questionRatingsIds: [ID!]
  questionRatings: [UserquestionRatingsQuestionRating!]
  userAnalyticsIds: [ID!]
  userAnalytics: [UseruserAnalyticsPrendusAnalytics!]
}

input AssignmentconceptsConcept {
  title: String!
  subjectId: ID
  subject: ConceptsubjectSubject
  assignmentsIds: [ID!]
  assignments: [ConceptassignmentsAssignment!]
  questionsIds: [ID!]
  questions: [ConceptquestionsQuestion!]
}

input AssignmentcourseCourse {
  description: String
  dueDate: DateTime
  price: Int
  title: String!
  authorId: ID
  author: CourseauthorUser
  disciplineId: ID
  discipline: CoursedisciplineDiscipline
  subjectId: ID
  subject: CoursesubjectSubject
  analyticsIds: [ID!]
  analytics: [CourseanalyticsPrendusAnalytics!]
  assignmentsIds: [ID!]
  assignments: [CourseassignmentsAssignment!]
  enrolledStudentsIds: [ID!]
  enrolledStudents: [CourseenrolledStudentsUser!]
  purchasesIds: [ID!]
  purchases: [CoursepurchasesPurchase!]
}

input AssignmentFilter {
  # Logical AND on all given filters.
  AND: [AssignmentFilter!]

  # Logical OR on all given filters.
  OR: [AssignmentFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  numCreateQuestions: Int

  # All values that are not equal to given value.
  numCreateQuestions_not: Int

  # All values that are contained in given list.
  numCreateQuestions_in: [Int!]

  # All values that are not contained in given list.
  numCreateQuestions_not_in: [Int!]

  # All values less than the given value.
  numCreateQuestions_lt: Int

  # All values less than or equal the given value.
  numCreateQuestions_lte: Int

  # All values greater than the given value.
  numCreateQuestions_gt: Int

  # All values greater than or equal the given value.
  numCreateQuestions_gte: Int
  numGradeResponses: Int

  # All values that are not equal to given value.
  numGradeResponses_not: Int

  # All values that are contained in given list.
  numGradeResponses_in: [Int!]

  # All values that are not contained in given list.
  numGradeResponses_not_in: [Int!]

  # All values less than the given value.
  numGradeResponses_lt: Int

  # All values less than or equal the given value.
  numGradeResponses_lte: Int

  # All values greater than the given value.
  numGradeResponses_gt: Int

  # All values greater than or equal the given value.
  numGradeResponses_gte: Int
  numResponseQuestions: Int

  # All values that are not equal to given value.
  numResponseQuestions_not: Int

  # All values that are contained in given list.
  numResponseQuestions_in: [Int!]

  # All values that are not contained in given list.
  numResponseQuestions_not_in: [Int!]

  # All values less than the given value.
  numResponseQuestions_lt: Int

  # All values less than or equal the given value.
  numResponseQuestions_lte: Int

  # All values greater than the given value.
  numResponseQuestions_gt: Int

  # All values greater than or equal the given value.
  numResponseQuestions_gte: Int
  numReviewQuestions: Int

  # All values that are not equal to given value.
  numReviewQuestions_not: Int

  # All values that are contained in given list.
  numReviewQuestions_in: [Int!]

  # All values that are not contained in given list.
  numReviewQuestions_not_in: [Int!]

  # All values less than the given value.
  numReviewQuestions_lt: Int

  # All values less than or equal the given value.
  numReviewQuestions_lte: Int

  # All values greater than the given value.
  numReviewQuestions_gt: Int

  # All values greater than or equal the given value.
  numReviewQuestions_gte: Int
  questionType: QuestionType

  # All values that are not equal to given value.
  questionType_not: QuestionType

  # All values that are contained in given list.
  questionType_in: [QuestionType!]

  # All values that are not contained in given list.
  questionType_not_in: [QuestionType!]
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  analytics_every: PrendusAnalyticsFilter
  analytics_some: PrendusAnalyticsFilter
  analytics_none: PrendusAnalyticsFilter
  author: UserFilter
  concepts_every: ConceptFilter
  concepts_some: ConceptFilter
  concepts_none: ConceptFilter
  course: CourseFilter
  questions_every: QuestionFilter
  questions_some: QuestionFilter
  questions_none: QuestionFilter
  quiz: QuizFilter
}

# AssignmentLTIGradePayload
type AssignmentLTIGradePayload {
  success: Boolean!
}

# AssignmentLTILaunchPayload
type AssignmentLTILaunchPayload {
  ltiJWTCookie: String
  ltiSessionIdJWTCookie: String!
  clientRedirectUrlCookie: String!
  serverRedirectUrl: String!
}

enum AssignmentOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  numCreateQuestions_ASC
  numCreateQuestions_DESC
  numGradeResponses_ASC
  numGradeResponses_DESC
  numResponseQuestions_ASC
  numResponseQuestions_DESC
  numReviewQuestions_ASC
  numReviewQuestions_DESC
  questionType_ASC
  questionType_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AssignmentPreviousValues {
  createdAt: DateTime!
  id: ID!
  numCreateQuestions: Int!
  numGradeResponses: Int!
  numResponseQuestions: Int!
  numReviewQuestions: Int!
  questionType: QuestionType!
  title: String!
  updatedAt: DateTime!
}

input AssignmentquestionsQuestion {
  code: String!
  conceptAlignment: Int
  difficulty: Int
  explanation: String
  inclusion: Int
  language: Int
  learningCategory: Int
  overall: Int
  plagiarism: Int
  resource: String
  text: String!
  visibility: QuestionVisibility
  authorId: ID
  author: QuestionauthorUser
  conceptId: ID
  concept: QuestionconceptConcept
  quizId: ID
  quiz: QuestionquizQuiz
  analyticsIds: [ID!]
  analytics: [QuestionanalyticsPrendusAnalytics!]
  answerCommentsIds: [ID!]
  answerComments: [QuestionanswerCommentsAnswerComment!]
  flagsIds: [ID!]
  flags: [QuestionflagsQuestionFlag!]
  imagesIds: [ID!]
  images: [QuestionimagesFile!]
  ratingsIds: [ID!]
  ratings: [QuestionratingsQuestionRating!]
  responsesIds: [ID!]
  responses: [QuestionresponsesQuestionResponse!]
}

input AssignmentquizQuiz {
  title: String!
  authorId: ID
  author: QuizauthorUser
  questionsIds: [ID!]
  questions: [QuizquestionsQuestion!]
}

input AssignmentSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [AssignmentSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [AssignmentSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: AssignmentSubscriptionFilterNode
}

input AssignmentSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  numCreateQuestions: Int

  # All values that are not equal to given value.
  numCreateQuestions_not: Int

  # All values that are contained in given list.
  numCreateQuestions_in: [Int!]

  # All values that are not contained in given list.
  numCreateQuestions_not_in: [Int!]

  # All values less than the given value.
  numCreateQuestions_lt: Int

  # All values less than or equal the given value.
  numCreateQuestions_lte: Int

  # All values greater than the given value.
  numCreateQuestions_gt: Int

  # All values greater than or equal the given value.
  numCreateQuestions_gte: Int
  numGradeResponses: Int

  # All values that are not equal to given value.
  numGradeResponses_not: Int

  # All values that are contained in given list.
  numGradeResponses_in: [Int!]

  # All values that are not contained in given list.
  numGradeResponses_not_in: [Int!]

  # All values less than the given value.
  numGradeResponses_lt: Int

  # All values less than or equal the given value.
  numGradeResponses_lte: Int

  # All values greater than the given value.
  numGradeResponses_gt: Int

  # All values greater than or equal the given value.
  numGradeResponses_gte: Int
  numResponseQuestions: Int

  # All values that are not equal to given value.
  numResponseQuestions_not: Int

  # All values that are contained in given list.
  numResponseQuestions_in: [Int!]

  # All values that are not contained in given list.
  numResponseQuestions_not_in: [Int!]

  # All values less than the given value.
  numResponseQuestions_lt: Int

  # All values less than or equal the given value.
  numResponseQuestions_lte: Int

  # All values greater than the given value.
  numResponseQuestions_gt: Int

  # All values greater than or equal the given value.
  numResponseQuestions_gte: Int
  numReviewQuestions: Int

  # All values that are not equal to given value.
  numReviewQuestions_not: Int

  # All values that are contained in given list.
  numReviewQuestions_in: [Int!]

  # All values that are not contained in given list.
  numReviewQuestions_not_in: [Int!]

  # All values less than the given value.
  numReviewQuestions_lt: Int

  # All values less than or equal the given value.
  numReviewQuestions_lte: Int

  # All values greater than the given value.
  numReviewQuestions_gt: Int

  # All values greater than or equal the given value.
  numReviewQuestions_gte: Int
  questionType: QuestionType

  # All values that are not equal to given value.
  questionType_not: QuestionType

  # All values that are contained in given list.
  questionType_in: [QuestionType!]

  # All values that are not contained in given list.
  questionType_not_in: [QuestionType!]
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  analytics_every: PrendusAnalyticsFilter
  analytics_some: PrendusAnalyticsFilter
  analytics_none: PrendusAnalyticsFilter
  author: UserFilter
  concepts_every: ConceptFilter
  concepts_some: ConceptFilter
  concepts_none: ConceptFilter
  course: CourseFilter
  questions_every: QuestionFilter
  questions_some: QuestionFilter
  questions_none: QuestionFilter
  quiz: QuizFilter
}

type AssignmentSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Assignment
  updatedFields: [String!]
  previousValues: AssignmentPreviousValues
}

# AuthenticateUserPayload
type AuthenticateUserPayload {
  token: String!
}

type CategoryScore implements Node {
  category: String!
  createdAt: DateTime!
  id: ID!
  questionRating(filter: QuestionRatingFilter): QuestionRating
  questionResponseRating(filter: QuestionResponseRatingFilter): QuestionResponseRating
  score: Int!
  updatedAt: DateTime!
}

input CategoryScoreFilter {
  # Logical AND on all given filters.
  AND: [CategoryScoreFilter!]

  # Logical OR on all given filters.
  OR: [CategoryScoreFilter!]
  category: String

  # All values that are not equal to given value.
  category_not: String

  # All values that are contained in given list.
  category_in: [String!]

  # All values that are not contained in given list.
  category_not_in: [String!]

  # All values less than the given value.
  category_lt: String

  # All values less than or equal the given value.
  category_lte: String

  # All values greater than the given value.
  category_gt: String

  # All values greater than or equal the given value.
  category_gte: String

  # All values containing the given string.
  category_contains: String

  # All values not containing the given string.
  category_not_contains: String

  # All values starting with the given string.
  category_starts_with: String

  # All values not starting with the given string.
  category_not_starts_with: String

  # All values ending with the given string.
  category_ends_with: String

  # All values not ending with the given string.
  category_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  score: Int

  # All values that are not equal to given value.
  score_not: Int

  # All values that are contained in given list.
  score_in: [Int!]

  # All values that are not contained in given list.
  score_not_in: [Int!]

  # All values less than the given value.
  score_lt: Int

  # All values less than or equal the given value.
  score_lte: Int

  # All values greater than the given value.
  score_gt: Int

  # All values greater than or equal the given value.
  score_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  questionRating: QuestionRatingFilter
  questionResponseRating: QuestionResponseRatingFilter
}

enum CategoryScoreOrderBy {
  category_ASC
  category_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  score_ASC
  score_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryScorePreviousValues {
  category: String!
  createdAt: DateTime!
  id: ID!
  score: Int!
  updatedAt: DateTime!
}

input CategoryScorequestionRatingQuestionRating {
  ratingJson: Json
  questionId: ID
  question: QuestionRatingquestionQuestion
  raterId: ID
  rater: QuestionRatingraterUser
  scoresIds: [ID!]
  scores: [QuestionRatingscoresCategoryScore!]
}

input CategoryScorequestionResponseRatingQuestionResponseRating {
  questionResponseId: ID
  questionResponse: QuestionResponseRatingquestionResponseQuestionResponse
  raterId: ID
  rater: QuestionResponseRatingraterUser
  scoresIds: [ID!]
  scores: [QuestionResponseRatingscoresCategoryScore!]
}

input CategoryScoreSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [CategoryScoreSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [CategoryScoreSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: CategoryScoreSubscriptionFilterNode
}

input CategoryScoreSubscriptionFilterNode {
  category: String

  # All values that are not equal to given value.
  category_not: String

  # All values that are contained in given list.
  category_in: [String!]

  # All values that are not contained in given list.
  category_not_in: [String!]

  # All values less than the given value.
  category_lt: String

  # All values less than or equal the given value.
  category_lte: String

  # All values greater than the given value.
  category_gt: String

  # All values greater than or equal the given value.
  category_gte: String

  # All values containing the given string.
  category_contains: String

  # All values not containing the given string.
  category_not_contains: String

  # All values starting with the given string.
  category_starts_with: String

  # All values not starting with the given string.
  category_not_starts_with: String

  # All values ending with the given string.
  category_ends_with: String

  # All values not ending with the given string.
  category_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  score: Int

  # All values that are not equal to given value.
  score_not: Int

  # All values that are contained in given list.
  score_in: [Int!]

  # All values that are not contained in given list.
  score_not_in: [Int!]

  # All values less than the given value.
  score_lt: Int

  # All values less than or equal the given value.
  score_lte: Int

  # All values greater than the given value.
  score_gt: Int

  # All values greater than or equal the given value.
  score_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  questionRating: QuestionRatingFilter
  questionResponseRating: QuestionResponseRatingFilter
}

type CategoryScoreSubscriptionPayload {
  mutation: _ModelMutationType!
  node: CategoryScore
  updatedFields: [String!]
  previousValues: CategoryScorePreviousValues
}

type Concept implements Node {
  assignments(filter: AssignmentFilter, orderBy: AssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Assignment!]
  createdAt: DateTime!
  id: ID!
  questions(filter: QuestionFilter, orderBy: QuestionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  subject(filter: SubjectFilter): Subject!
  title: String!
  updatedAt: DateTime!

  # Meta information about the query.
  _assignmentsMeta(filter: AssignmentFilter, orderBy: AssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _questionsMeta(filter: QuestionFilter, orderBy: QuestionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input ConceptassignmentsAssignment {
  numCreateQuestions: Int
  numGradeResponses: Int
  numResponseQuestions: Int
  numReviewQuestions: Int
  questionType: QuestionType
  title: String!
  authorId: ID
  author: AssignmentauthorUser
  courseId: ID
  course: AssignmentcourseCourse
  quizId: ID
  quiz: AssignmentquizQuiz
  analyticsIds: [ID!]
  analytics: [AssignmentanalyticsPrendusAnalytics!]
  conceptsIds: [ID!]
  concepts: [AssignmentconceptsConcept!]
  questionsIds: [ID!]
  questions: [AssignmentquestionsQuestion!]
}

input ConceptFilter {
  # Logical AND on all given filters.
  AND: [ConceptFilter!]

  # Logical OR on all given filters.
  OR: [ConceptFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  assignments_every: AssignmentFilter
  assignments_some: AssignmentFilter
  assignments_none: AssignmentFilter
  questions_every: QuestionFilter
  questions_some: QuestionFilter
  questions_none: QuestionFilter
  subject: SubjectFilter
}

enum ConceptOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ConceptPreviousValues {
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

input ConceptquestionsQuestion {
  code: String!
  conceptAlignment: Int
  difficulty: Int
  explanation: String
  inclusion: Int
  language: Int
  learningCategory: Int
  overall: Int
  plagiarism: Int
  resource: String
  text: String!
  visibility: QuestionVisibility
  assignmentId: ID
  assignment: QuestionassignmentAssignment
  authorId: ID
  author: QuestionauthorUser
  quizId: ID
  quiz: QuestionquizQuiz
  analyticsIds: [ID!]
  analytics: [QuestionanalyticsPrendusAnalytics!]
  answerCommentsIds: [ID!]
  answerComments: [QuestionanswerCommentsAnswerComment!]
  flagsIds: [ID!]
  flags: [QuestionflagsQuestionFlag!]
  imagesIds: [ID!]
  images: [QuestionimagesFile!]
  ratingsIds: [ID!]
  ratings: [QuestionratingsQuestionRating!]
  responsesIds: [ID!]
  responses: [QuestionresponsesQuestionResponse!]
}

input ConceptsubjectSubject {
  approved: PrendusApproved
  title: String!
  disciplineId: ID
  discipline: SubjectdisciplineDiscipline
  conceptsIds: [ID!]
  concepts: [SubjectconceptsConcept!]
  coursesIds: [ID!]
  courses: [SubjectcoursesCourse!]
}

input ConceptSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [ConceptSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [ConceptSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: ConceptSubscriptionFilterNode
}

input ConceptSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  assignments_every: AssignmentFilter
  assignments_some: AssignmentFilter
  assignments_none: AssignmentFilter
  questions_every: QuestionFilter
  questions_some: QuestionFilter
  questions_none: QuestionFilter
  subject: SubjectFilter
}

type ConceptSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Concept
  updatedFields: [String!]
  previousValues: ConceptPreviousValues
}

enum ContextType {
  QUESTION
  ASSIGNMENT
  QUIZ
  COURSE
}

type Course implements Node {
  analytics(filter: PrendusAnalyticsFilter, orderBy: PrendusAnalyticsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PrendusAnalytics!]
  assignments(filter: AssignmentFilter, orderBy: AssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Assignment!]
  author(filter: UserFilter): User!
  createdAt: DateTime!
  description: String
  discipline(filter: DisciplineFilter): Discipline
  dueDate: DateTime
  enrolledStudents(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  id: ID!
  price: Int!
  purchases(filter: PurchaseFilter, orderBy: PurchaseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Purchase!]
  subject(filter: SubjectFilter): Subject
  title: String!
  updatedAt: DateTime!

  # Meta information about the query.
  _analyticsMeta(filter: PrendusAnalyticsFilter, orderBy: PrendusAnalyticsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _assignmentsMeta(filter: AssignmentFilter, orderBy: AssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _enrolledStudentsMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _purchasesMeta(filter: PurchaseFilter, orderBy: PurchaseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input CourseanalyticsPrendusAnalytics {
  contextId: String
  contextType: ContextType
  object: String
  verb: String!
  assignmentId: ID
  assignment: PrendusAnalyticsassignmentAssignment
  questionId: ID
  question: PrendusAnalyticsquestionQuestion
  userId: ID
  user: PrendusAnalyticsuserUser
}

input CourseassignmentsAssignment {
  numCreateQuestions: Int
  numGradeResponses: Int
  numResponseQuestions: Int
  numReviewQuestions: Int
  questionType: QuestionType
  title: String!
  authorId: ID
  author: AssignmentauthorUser
  quizId: ID
  quiz: AssignmentquizQuiz
  analyticsIds: [ID!]
  analytics: [AssignmentanalyticsPrendusAnalytics!]
  conceptsIds: [ID!]
  concepts: [AssignmentconceptsConcept!]
  questionsIds: [ID!]
  questions: [AssignmentquestionsQuestion!]
}

input CourseauthorUser {
  email: String
  password: String
  role: UserRole
  enrolledCoursesIds: [ID!]
  enrolledCourses: [UserenrolledCoursesCourse!]
  ltiUsersIds: [ID!]
  ltiUsers: [UserltiUsersLTIUser!]
  ownedAssignmentsIds: [ID!]
  ownedAssignments: [UserownedAssignmentsAssignment!]
  ownedCoursesIds: [ID!]
  ownedCourses: [UserownedCoursesCourse!]
  ownedQuestionResponseRatingsIds: [ID!]
  ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!]
  ownedQuestionResponsesIds: [ID!]
  ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!]
  ownedQuestionsIds: [ID!]
  ownedQuestions: [UserownedQuestionsQuestion!]
  ownedQuizzesIds: [ID!]
  ownedQuizzes: [UserownedQuizzesQuiz!]
  purchasesIds: [ID!]
  purchases: [UserpurchasesPurchase!]
  questionRatingsIds: [ID!]
  questionRatings: [UserquestionRatingsQuestionRating!]
  userAnalyticsIds: [ID!]
  userAnalytics: [UseruserAnalyticsPrendusAnalytics!]
}

input CoursedisciplineDiscipline {
  approved: PrendusApproved
  title: String!
  coursesIds: [ID!]
  courses: [DisciplinecoursesCourse!]
  subjectsIds: [ID!]
  subjects: [DisciplinesubjectsSubject!]
}

input CourseenrolledStudentsUser {
  email: String
  password: String
  role: UserRole
  enrolledCoursesIds: [ID!]
  enrolledCourses: [UserenrolledCoursesCourse!]
  ltiUsersIds: [ID!]
  ltiUsers: [UserltiUsersLTIUser!]
  ownedAssignmentsIds: [ID!]
  ownedAssignments: [UserownedAssignmentsAssignment!]
  ownedCoursesIds: [ID!]
  ownedCourses: [UserownedCoursesCourse!]
  ownedQuestionResponseRatingsIds: [ID!]
  ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!]
  ownedQuestionResponsesIds: [ID!]
  ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!]
  ownedQuestionsIds: [ID!]
  ownedQuestions: [UserownedQuestionsQuestion!]
  ownedQuizzesIds: [ID!]
  ownedQuizzes: [UserownedQuizzesQuiz!]
  purchasesIds: [ID!]
  purchases: [UserpurchasesPurchase!]
  questionRatingsIds: [ID!]
  questionRatings: [UserquestionRatingsQuestionRating!]
  userAnalyticsIds: [ID!]
  userAnalytics: [UseruserAnalyticsPrendusAnalytics!]
}

input CourseFilter {
  # Logical AND on all given filters.
  AND: [CourseFilter!]

  # Logical OR on all given filters.
  OR: [CourseFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  description: String

  # All values that are not equal to given value.
  description_not: String

  # All values that are contained in given list.
  description_in: [String!]

  # All values that are not contained in given list.
  description_not_in: [String!]

  # All values less than the given value.
  description_lt: String

  # All values less than or equal the given value.
  description_lte: String

  # All values greater than the given value.
  description_gt: String

  # All values greater than or equal the given value.
  description_gte: String

  # All values containing the given string.
  description_contains: String

  # All values not containing the given string.
  description_not_contains: String

  # All values starting with the given string.
  description_starts_with: String

  # All values not starting with the given string.
  description_not_starts_with: String

  # All values ending with the given string.
  description_ends_with: String

  # All values not ending with the given string.
  description_not_ends_with: String
  dueDate: DateTime

  # All values that are not equal to given value.
  dueDate_not: DateTime

  # All values that are contained in given list.
  dueDate_in: [DateTime!]

  # All values that are not contained in given list.
  dueDate_not_in: [DateTime!]

  # All values less than the given value.
  dueDate_lt: DateTime

  # All values less than or equal the given value.
  dueDate_lte: DateTime

  # All values greater than the given value.
  dueDate_gt: DateTime

  # All values greater than or equal the given value.
  dueDate_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  price: Int

  # All values that are not equal to given value.
  price_not: Int

  # All values that are contained in given list.
  price_in: [Int!]

  # All values that are not contained in given list.
  price_not_in: [Int!]

  # All values less than the given value.
  price_lt: Int

  # All values less than or equal the given value.
  price_lte: Int

  # All values greater than the given value.
  price_gt: Int

  # All values greater than or equal the given value.
  price_gte: Int
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  analytics_every: PrendusAnalyticsFilter
  analytics_some: PrendusAnalyticsFilter
  analytics_none: PrendusAnalyticsFilter
  assignments_every: AssignmentFilter
  assignments_some: AssignmentFilter
  assignments_none: AssignmentFilter
  author: UserFilter
  discipline: DisciplineFilter
  enrolledStudents_every: UserFilter
  enrolledStudents_some: UserFilter
  enrolledStudents_none: UserFilter
  purchases_every: PurchaseFilter
  purchases_some: PurchaseFilter
  purchases_none: PurchaseFilter
  subject: SubjectFilter
}

enum CourseOrderBy {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  dueDate_ASC
  dueDate_DESC
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# CoursePaymentPayload
type CoursePaymentPayload {
  id: ID!
}

type CoursePreviousValues {
  createdAt: DateTime!
  description: String
  dueDate: DateTime
  id: ID!
  price: Int!
  title: String!
  updatedAt: DateTime!
}

input CoursepurchasesPurchase {
  amount: Int!
  stripeTokenId: String!
  userId: ID
  user: PurchaseuserUser
}

input CoursesubjectSubject {
  approved: PrendusApproved
  title: String!
  disciplineId: ID
  discipline: SubjectdisciplineDiscipline
  conceptsIds: [ID!]
  concepts: [SubjectconceptsConcept!]
  coursesIds: [ID!]
  courses: [SubjectcoursesCourse!]
}

input CourseSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [CourseSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [CourseSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: CourseSubscriptionFilterNode
}

input CourseSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  description: String

  # All values that are not equal to given value.
  description_not: String

  # All values that are contained in given list.
  description_in: [String!]

  # All values that are not contained in given list.
  description_not_in: [String!]

  # All values less than the given value.
  description_lt: String

  # All values less than or equal the given value.
  description_lte: String

  # All values greater than the given value.
  description_gt: String

  # All values greater than or equal the given value.
  description_gte: String

  # All values containing the given string.
  description_contains: String

  # All values not containing the given string.
  description_not_contains: String

  # All values starting with the given string.
  description_starts_with: String

  # All values not starting with the given string.
  description_not_starts_with: String

  # All values ending with the given string.
  description_ends_with: String

  # All values not ending with the given string.
  description_not_ends_with: String
  dueDate: DateTime

  # All values that are not equal to given value.
  dueDate_not: DateTime

  # All values that are contained in given list.
  dueDate_in: [DateTime!]

  # All values that are not contained in given list.
  dueDate_not_in: [DateTime!]

  # All values less than the given value.
  dueDate_lt: DateTime

  # All values less than or equal the given value.
  dueDate_lte: DateTime

  # All values greater than the given value.
  dueDate_gt: DateTime

  # All values greater than or equal the given value.
  dueDate_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  price: Int

  # All values that are not equal to given value.
  price_not: Int

  # All values that are contained in given list.
  price_in: [Int!]

  # All values that are not contained in given list.
  price_not_in: [Int!]

  # All values less than the given value.
  price_lt: Int

  # All values less than or equal the given value.
  price_lte: Int

  # All values greater than the given value.
  price_gt: Int

  # All values greater than or equal the given value.
  price_gte: Int
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  analytics_every: PrendusAnalyticsFilter
  analytics_some: PrendusAnalyticsFilter
  analytics_none: PrendusAnalyticsFilter
  assignments_every: AssignmentFilter
  assignments_some: AssignmentFilter
  assignments_none: AssignmentFilter
  author: UserFilter
  discipline: DisciplineFilter
  enrolledStudents_every: UserFilter
  enrolledStudents_some: UserFilter
  enrolledStudents_none: UserFilter
  purchases_every: PurchaseFilter
  purchases_some: PurchaseFilter
  purchases_none: PurchaseFilter
  subject: SubjectFilter
}

type CourseSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CreateAnswerComment {
  text: String!
  questionId: ID
  question: AnswerCommentquestionQuestion
}

input CreateAssignment {
  numCreateQuestions: Int
  numGradeResponses: Int
  numResponseQuestions: Int
  numReviewQuestions: Int
  questionType: QuestionType
  title: String!
  authorId: ID
  author: AssignmentauthorUser
  courseId: ID
  course: AssignmentcourseCourse
  quizId: ID
  quiz: AssignmentquizQuiz
  analyticsIds: [ID!]
  analytics: [AssignmentanalyticsPrendusAnalytics!]
  conceptsIds: [ID!]
  concepts: [AssignmentconceptsConcept!]
  questionsIds: [ID!]
  questions: [AssignmentquestionsQuestion!]
}

input CreateCategoryScore {
  category: String!
  score: Int!
  questionRatingId: ID
  questionRating: CategoryScorequestionRatingQuestionRating
  questionResponseRatingId: ID
  questionResponseRating: CategoryScorequestionResponseRatingQuestionResponseRating
}

input CreateConcept {
  title: String!
  subjectId: ID
  subject: ConceptsubjectSubject
  assignmentsIds: [ID!]
  assignments: [ConceptassignmentsAssignment!]
  questionsIds: [ID!]
  questions: [ConceptquestionsQuestion!]
}

input CreateCourse {
  description: String
  dueDate: DateTime
  price: Int
  title: String!
  authorId: ID
  author: CourseauthorUser
  disciplineId: ID
  discipline: CoursedisciplineDiscipline
  subjectId: ID
  subject: CoursesubjectSubject
  analyticsIds: [ID!]
  analytics: [CourseanalyticsPrendusAnalytics!]
  assignmentsIds: [ID!]
  assignments: [CourseassignmentsAssignment!]
  enrolledStudentsIds: [ID!]
  enrolledStudents: [CourseenrolledStudentsUser!]
  purchasesIds: [ID!]
  purchases: [CoursepurchasesPurchase!]
}

input CreateDiscipline {
  approved: PrendusApproved
  title: String!
  coursesIds: [ID!]
  courses: [DisciplinecoursesCourse!]
  subjectsIds: [ID!]
  subjects: [DisciplinesubjectsSubject!]
}

input CreateFile {
  contentType: String!
  name: String!
  secret: String!
  size: Int!
  url: String!
  questionId: ID
  question: FilequestionQuestion
}

input CreateLTISession {
  ltiUserId: String!
  serializedOutcomeService: Json!
}

input CreateLTIUser {
  lisPersonContactEmailPrimary: String!
  ltiUserId: String!
  userId: ID
  user: LTIUseruserUser
}

input CreatePrendusAnalytics {
  contextId: String
  contextType: ContextType
  object: String
  verb: String!
  assignmentId: ID
  assignment: PrendusAnalyticsassignmentAssignment
  courseId: ID
  course: PrendusAnalyticscourseCourse
  questionId: ID
  question: PrendusAnalyticsquestionQuestion
  userId: ID
  user: PrendusAnalyticsuserUser
}

input CreatePurchase {
  amount: Int!
  stripeTokenId: String!
  courseId: ID
  course: PurchasecourseCourse
  userId: ID
  user: PurchaseuserUser
}

input CreateQuestion {
  code: String!
  conceptAlignment: Int
  difficulty: Int
  explanation: String
  inclusion: Int
  language: Int
  learningCategory: Int
  overall: Int
  plagiarism: Int
  resource: String
  text: String!
  visibility: QuestionVisibility
  assignmentId: ID
  assignment: QuestionassignmentAssignment
  authorId: ID
  author: QuestionauthorUser
  conceptId: ID
  concept: QuestionconceptConcept
  quizId: ID
  quiz: QuestionquizQuiz
  analyticsIds: [ID!]
  analytics: [QuestionanalyticsPrendusAnalytics!]
  answerCommentsIds: [ID!]
  answerComments: [QuestionanswerCommentsAnswerComment!]
  flagsIds: [ID!]
  flags: [QuestionflagsQuestionFlag!]
  imagesIds: [ID!]
  images: [QuestionimagesFile!]
  ratingsIds: [ID!]
  ratings: [QuestionratingsQuestionRating!]
  responsesIds: [ID!]
  responses: [QuestionresponsesQuestionResponse!]
}

input CreateQuestionFlag {
  comment: String!
  questionId: ID
  question: QuestionFlagquestionQuestion
}

input CreateQuestionRating {
  ratingJson: Json
  questionId: ID
  question: QuestionRatingquestionQuestion
  raterId: ID
  rater: QuestionRatingraterUser
  scoresIds: [ID!]
  scores: [QuestionRatingscoresCategoryScore!]
}

input CreateQuestionResponse {
  authorId: ID
  author: QuestionResponseauthorUser
  questionId: ID
  question: QuestionResponsequestionQuestion
  ratingsIds: [ID!]
  ratings: [QuestionResponseratingsQuestionResponseRating!]
  userChecksIds: [ID!]
  userChecks: [QuestionResponseuserChecksUserCheck!]
  userEssaysIds: [ID!]
  userEssays: [QuestionResponseuserEssaysUserEssay!]
  userInputsIds: [ID!]
  userInputs: [QuestionResponseuserInputsUserInput!]
  userRadiosIds: [ID!]
  userRadios: [QuestionResponseuserRadiosUserRadio!]
  userVariablesIds: [ID!]
  userVariables: [QuestionResponseuserVariablesUserVariable!]
}

input CreateQuestionResponseRating {
  questionResponseId: ID
  questionResponse: QuestionResponseRatingquestionResponseQuestionResponse
  raterId: ID
  rater: QuestionResponseRatingraterUser
  scoresIds: [ID!]
  scores: [QuestionResponseRatingscoresCategoryScore!]
}

input CreateQuiz {
  title: String!
  assignmentId: ID
  assignment: QuizassignmentAssignment
  authorId: ID
  author: QuizauthorUser
  questionsIds: [ID!]
  questions: [QuizquestionsQuestion!]
}

input CreateSubject {
  approved: PrendusApproved
  title: String!
  disciplineId: ID
  discipline: SubjectdisciplineDiscipline
  conceptsIds: [ID!]
  concepts: [SubjectconceptsConcept!]
  coursesIds: [ID!]
  courses: [SubjectcoursesCourse!]
}

input CreateUser {
  email: String
  password: String
  role: UserRole
  enrolledCoursesIds: [ID!]
  enrolledCourses: [UserenrolledCoursesCourse!]
  ltiUsersIds: [ID!]
  ltiUsers: [UserltiUsersLTIUser!]
  ownedAssignmentsIds: [ID!]
  ownedAssignments: [UserownedAssignmentsAssignment!]
  ownedCoursesIds: [ID!]
  ownedCourses: [UserownedCoursesCourse!]
  ownedQuestionResponseRatingsIds: [ID!]
  ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!]
  ownedQuestionResponsesIds: [ID!]
  ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!]
  ownedQuestionsIds: [ID!]
  ownedQuestions: [UserownedQuestionsQuestion!]
  ownedQuizzesIds: [ID!]
  ownedQuizzes: [UserownedQuizzesQuiz!]
  purchasesIds: [ID!]
  purchases: [UserpurchasesPurchase!]
  questionRatingsIds: [ID!]
  questionRatings: [UserquestionRatingsQuestionRating!]
  userAnalyticsIds: [ID!]
  userAnalytics: [UseruserAnalyticsPrendusAnalytics!]
}

input CreateUserCheck {
  checked: Boolean!
  varName: String!
  questionResponseId: ID
  questionResponse: UserCheckquestionResponseQuestionResponse
}

input CreateUserEssay {
  value: String!
  varName: String!
  questionResponseId: ID
  questionResponse: UserEssayquestionResponseQuestionResponse
}

input CreateUserInput {
  value: String!
  varName: String!
  questionResponseId: ID
  questionResponse: UserInputquestionResponseQuestionResponse
}

input CreateUserRadio {
  checked: Boolean!
  varName: String!
  questionResponseId: ID
  questionResponse: UserRadioquestionResponseQuestionResponse
}

input CreateUserVariable {
  value: Float!
  varName: String!
  questionResponseId: ID
  questionResponse: UserVariablequestionResponseQuestionResponse
}

scalar DateTime

type Discipline implements Node {
  approved: PrendusApproved!
  courses(filter: CourseFilter, orderBy: CourseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  createdAt: DateTime!
  id: ID!
  subjects(filter: SubjectFilter, orderBy: SubjectOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  title: String!
  updatedAt: DateTime!

  # Meta information about the query.
  _coursesMeta(filter: CourseFilter, orderBy: CourseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _subjectsMeta(filter: SubjectFilter, orderBy: SubjectOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input DisciplinecoursesCourse {
  description: String
  dueDate: DateTime
  price: Int
  title: String!
  authorId: ID
  author: CourseauthorUser
  subjectId: ID
  subject: CoursesubjectSubject
  analyticsIds: [ID!]
  analytics: [CourseanalyticsPrendusAnalytics!]
  assignmentsIds: [ID!]
  assignments: [CourseassignmentsAssignment!]
  enrolledStudentsIds: [ID!]
  enrolledStudents: [CourseenrolledStudentsUser!]
  purchasesIds: [ID!]
  purchases: [CoursepurchasesPurchase!]
}

input DisciplineFilter {
  # Logical AND on all given filters.
  AND: [DisciplineFilter!]

  # Logical OR on all given filters.
  OR: [DisciplineFilter!]
  approved: PrendusApproved

  # All values that are not equal to given value.
  approved_not: PrendusApproved

  # All values that are contained in given list.
  approved_in: [PrendusApproved!]

  # All values that are not contained in given list.
  approved_not_in: [PrendusApproved!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  courses_every: CourseFilter
  courses_some: CourseFilter
  courses_none: CourseFilter
  subjects_every: SubjectFilter
  subjects_some: SubjectFilter
  subjects_none: SubjectFilter
}

enum DisciplineOrderBy {
  approved_ASC
  approved_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DisciplinePreviousValues {
  approved: PrendusApproved!
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

input DisciplinesubjectsSubject {
  approved: PrendusApproved
  title: String!
  conceptsIds: [ID!]
  concepts: [SubjectconceptsConcept!]
  coursesIds: [ID!]
  courses: [SubjectcoursesCourse!]
}

input DisciplineSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [DisciplineSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [DisciplineSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: DisciplineSubscriptionFilterNode
}

input DisciplineSubscriptionFilterNode {
  approved: PrendusApproved

  # All values that are not equal to given value.
  approved_not: PrendusApproved

  # All values that are contained in given list.
  approved_in: [PrendusApproved!]

  # All values that are not contained in given list.
  approved_not_in: [PrendusApproved!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  courses_every: CourseFilter
  courses_some: CourseFilter
  courses_none: CourseFilter
  subjects_every: SubjectFilter
  subjects_some: SubjectFilter
  subjects_none: SubjectFilter
}

type DisciplineSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Discipline
  updatedFields: [String!]
  previousValues: DisciplinePreviousValues
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  question(filter: QuestionFilter): Question
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

input FileFilter {
  # Logical AND on all given filters.
  AND: [FileFilter!]

  # Logical OR on all given filters.
  OR: [FileFilter!]
  contentType: String

  # All values that are not equal to given value.
  contentType_not: String

  # All values that are contained in given list.
  contentType_in: [String!]

  # All values that are not contained in given list.
  contentType_not_in: [String!]

  # All values less than the given value.
  contentType_lt: String

  # All values less than or equal the given value.
  contentType_lte: String

  # All values greater than the given value.
  contentType_gt: String

  # All values greater than or equal the given value.
  contentType_gte: String

  # All values containing the given string.
  contentType_contains: String

  # All values not containing the given string.
  contentType_not_contains: String

  # All values starting with the given string.
  contentType_starts_with: String

  # All values not starting with the given string.
  contentType_not_starts_with: String

  # All values ending with the given string.
  contentType_ends_with: String

  # All values not ending with the given string.
  contentType_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  secret: String

  # All values that are not equal to given value.
  secret_not: String

  # All values that are contained in given list.
  secret_in: [String!]

  # All values that are not contained in given list.
  secret_not_in: [String!]

  # All values less than the given value.
  secret_lt: String

  # All values less than or equal the given value.
  secret_lte: String

  # All values greater than the given value.
  secret_gt: String

  # All values greater than or equal the given value.
  secret_gte: String

  # All values containing the given string.
  secret_contains: String

  # All values not containing the given string.
  secret_not_contains: String

  # All values starting with the given string.
  secret_starts_with: String

  # All values not starting with the given string.
  secret_not_starts_with: String

  # All values ending with the given string.
  secret_ends_with: String

  # All values not ending with the given string.
  secret_not_ends_with: String
  size: Int

  # All values that are not equal to given value.
  size_not: Int

  # All values that are contained in given list.
  size_in: [Int!]

  # All values that are not contained in given list.
  size_not_in: [Int!]

  # All values less than the given value.
  size_lt: Int

  # All values less than or equal the given value.
  size_lte: Int

  # All values greater than the given value.
  size_gt: Int

  # All values greater than or equal the given value.
  size_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
  question: QuestionFilter
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

input FilequestionQuestion {
  code: String!
  conceptAlignment: Int
  difficulty: Int
  explanation: String
  inclusion: Int
  language: Int
  learningCategory: Int
  overall: Int
  plagiarism: Int
  resource: String
  text: String!
  visibility: QuestionVisibility
  assignmentId: ID
  assignment: QuestionassignmentAssignment
  authorId: ID
  author: QuestionauthorUser
  conceptId: ID
  concept: QuestionconceptConcept
  quizId: ID
  quiz: QuestionquizQuiz
  analyticsIds: [ID!]
  analytics: [QuestionanalyticsPrendusAnalytics!]
  answerCommentsIds: [ID!]
  answerComments: [QuestionanswerCommentsAnswerComment!]
  flagsIds: [ID!]
  flags: [QuestionflagsQuestionFlag!]
  imagesIds: [ID!]
  images: [QuestionimagesFile!]
  ratingsIds: [ID!]
  ratings: [QuestionratingsQuestionRating!]
  responsesIds: [ID!]
  responses: [QuestionresponsesQuestionResponse!]
}

input FileSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [FileSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [FileSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: FileSubscriptionFilterNode
}

input FileSubscriptionFilterNode {
  contentType: String

  # All values that are not equal to given value.
  contentType_not: String

  # All values that are contained in given list.
  contentType_in: [String!]

  # All values that are not contained in given list.
  contentType_not_in: [String!]

  # All values less than the given value.
  contentType_lt: String

  # All values less than or equal the given value.
  contentType_lte: String

  # All values greater than the given value.
  contentType_gt: String

  # All values greater than or equal the given value.
  contentType_gte: String

  # All values containing the given string.
  contentType_contains: String

  # All values not containing the given string.
  contentType_not_contains: String

  # All values starting with the given string.
  contentType_starts_with: String

  # All values not starting with the given string.
  contentType_not_starts_with: String

  # All values ending with the given string.
  contentType_ends_with: String

  # All values not ending with the given string.
  contentType_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  secret: String

  # All values that are not equal to given value.
  secret_not: String

  # All values that are contained in given list.
  secret_in: [String!]

  # All values that are not contained in given list.
  secret_not_in: [String!]

  # All values less than the given value.
  secret_lt: String

  # All values less than or equal the given value.
  secret_lte: String

  # All values greater than the given value.
  secret_gt: String

  # All values greater than or equal the given value.
  secret_gte: String

  # All values containing the given string.
  secret_contains: String

  # All values not containing the given string.
  secret_not_contains: String

  # All values starting with the given string.
  secret_starts_with: String

  # All values not starting with the given string.
  secret_not_starts_with: String

  # All values ending with the given string.
  secret_ends_with: String

  # All values not ending with the given string.
  secret_not_ends_with: String
  size: Int

  # All values that are not equal to given value.
  size_not: Int

  # All values that are contained in given list.
  size_in: [Int!]

  # All values that are not contained in given list.
  size_not_in: [Int!]

  # All values less than the given value.
  size_lt: Int

  # All values less than or equal the given value.
  size_lte: Int

  # All values greater than the given value.
  size_gt: Int

  # All values greater than or equal the given value.
  size_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
  question: QuestionFilter
}

type FileSubscriptionPayload {
  mutation: _ModelMutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

# Raw JSON value
scalar Json

type LTISession implements Node {
  createdAt: DateTime!
  id: ID!
  ltiUserId: String!
  serializedOutcomeService: Json!
  updatedAt: DateTime!
}

input LTISessionFilter {
  # Logical AND on all given filters.
  AND: [LTISessionFilter!]

  # Logical OR on all given filters.
  OR: [LTISessionFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  ltiUserId: String

  # All values that are not equal to given value.
  ltiUserId_not: String

  # All values that are contained in given list.
  ltiUserId_in: [String!]

  # All values that are not contained in given list.
  ltiUserId_not_in: [String!]

  # All values less than the given value.
  ltiUserId_lt: String

  # All values less than or equal the given value.
  ltiUserId_lte: String

  # All values greater than the given value.
  ltiUserId_gt: String

  # All values greater than or equal the given value.
  ltiUserId_gte: String

  # All values containing the given string.
  ltiUserId_contains: String

  # All values not containing the given string.
  ltiUserId_not_contains: String

  # All values starting with the given string.
  ltiUserId_starts_with: String

  # All values not starting with the given string.
  ltiUserId_not_starts_with: String

  # All values ending with the given string.
  ltiUserId_ends_with: String

  # All values not ending with the given string.
  ltiUserId_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum LTISessionOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  ltiUserId_ASC
  ltiUserId_DESC
  serializedOutcomeService_ASC
  serializedOutcomeService_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LTISessionPreviousValues {
  createdAt: DateTime!
  id: ID!
  ltiUserId: String!
  serializedOutcomeService: Json!
  updatedAt: DateTime!
}

input LTISessionSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [LTISessionSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [LTISessionSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: LTISessionSubscriptionFilterNode
}

input LTISessionSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  ltiUserId: String

  # All values that are not equal to given value.
  ltiUserId_not: String

  # All values that are contained in given list.
  ltiUserId_in: [String!]

  # All values that are not contained in given list.
  ltiUserId_not_in: [String!]

  # All values less than the given value.
  ltiUserId_lt: String

  # All values less than or equal the given value.
  ltiUserId_lte: String

  # All values greater than the given value.
  ltiUserId_gt: String

  # All values greater than or equal the given value.
  ltiUserId_gte: String

  # All values containing the given string.
  ltiUserId_contains: String

  # All values not containing the given string.
  ltiUserId_not_contains: String

  # All values starting with the given string.
  ltiUserId_starts_with: String

  # All values not starting with the given string.
  ltiUserId_not_starts_with: String

  # All values ending with the given string.
  ltiUserId_ends_with: String

  # All values not ending with the given string.
  ltiUserId_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

type LTISessionSubscriptionPayload {
  mutation: _ModelMutationType!
  node: LTISession
  updatedFields: [String!]
  previousValues: LTISessionPreviousValues
}

type LTIUser implements Node {
  createdAt: DateTime!
  id: ID!
  lisPersonContactEmailPrimary: String!
  ltiUserId: String!
  updatedAt: DateTime!
  user(filter: UserFilter): User!
}

input LTIUserFilter {
  # Logical AND on all given filters.
  AND: [LTIUserFilter!]

  # Logical OR on all given filters.
  OR: [LTIUserFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  lisPersonContactEmailPrimary: String

  # All values that are not equal to given value.
  lisPersonContactEmailPrimary_not: String

  # All values that are contained in given list.
  lisPersonContactEmailPrimary_in: [String!]

  # All values that are not contained in given list.
  lisPersonContactEmailPrimary_not_in: [String!]

  # All values less than the given value.
  lisPersonContactEmailPrimary_lt: String

  # All values less than or equal the given value.
  lisPersonContactEmailPrimary_lte: String

  # All values greater than the given value.
  lisPersonContactEmailPrimary_gt: String

  # All values greater than or equal the given value.
  lisPersonContactEmailPrimary_gte: String

  # All values containing the given string.
  lisPersonContactEmailPrimary_contains: String

  # All values not containing the given string.
  lisPersonContactEmailPrimary_not_contains: String

  # All values starting with the given string.
  lisPersonContactEmailPrimary_starts_with: String

  # All values not starting with the given string.
  lisPersonContactEmailPrimary_not_starts_with: String

  # All values ending with the given string.
  lisPersonContactEmailPrimary_ends_with: String

  # All values not ending with the given string.
  lisPersonContactEmailPrimary_not_ends_with: String
  ltiUserId: String

  # All values that are not equal to given value.
  ltiUserId_not: String

  # All values that are contained in given list.
  ltiUserId_in: [String!]

  # All values that are not contained in given list.
  ltiUserId_not_in: [String!]

  # All values less than the given value.
  ltiUserId_lt: String

  # All values less than or equal the given value.
  ltiUserId_lte: String

  # All values greater than the given value.
  ltiUserId_gt: String

  # All values greater than or equal the given value.
  ltiUserId_gte: String

  # All values containing the given string.
  ltiUserId_contains: String

  # All values not containing the given string.
  ltiUserId_not_contains: String

  # All values starting with the given string.
  ltiUserId_starts_with: String

  # All values not starting with the given string.
  ltiUserId_not_starts_with: String

  # All values ending with the given string.
  ltiUserId_ends_with: String

  # All values not ending with the given string.
  ltiUserId_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  user: UserFilter
}

enum LTIUserOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  lisPersonContactEmailPrimary_ASC
  lisPersonContactEmailPrimary_DESC
  ltiUserId_ASC
  ltiUserId_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LTIUserPreviousValues {
  createdAt: DateTime!
  id: ID!
  lisPersonContactEmailPrimary: String!
  ltiUserId: String!
  updatedAt: DateTime!
}

input LTIUserSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [LTIUserSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [LTIUserSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: LTIUserSubscriptionFilterNode
}

input LTIUserSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  lisPersonContactEmailPrimary: String

  # All values that are not equal to given value.
  lisPersonContactEmailPrimary_not: String

  # All values that are contained in given list.
  lisPersonContactEmailPrimary_in: [String!]

  # All values that are not contained in given list.
  lisPersonContactEmailPrimary_not_in: [String!]

  # All values less than the given value.
  lisPersonContactEmailPrimary_lt: String

  # All values less than or equal the given value.
  lisPersonContactEmailPrimary_lte: String

  # All values greater than the given value.
  lisPersonContactEmailPrimary_gt: String

  # All values greater than or equal the given value.
  lisPersonContactEmailPrimary_gte: String

  # All values containing the given string.
  lisPersonContactEmailPrimary_contains: String

  # All values not containing the given string.
  lisPersonContactEmailPrimary_not_contains: String

  # All values starting with the given string.
  lisPersonContactEmailPrimary_starts_with: String

  # All values not starting with the given string.
  lisPersonContactEmailPrimary_not_starts_with: String

  # All values ending with the given string.
  lisPersonContactEmailPrimary_ends_with: String

  # All values not ending with the given string.
  lisPersonContactEmailPrimary_not_ends_with: String
  ltiUserId: String

  # All values that are not equal to given value.
  ltiUserId_not: String

  # All values that are contained in given list.
  ltiUserId_in: [String!]

  # All values that are not contained in given list.
  ltiUserId_not_in: [String!]

  # All values less than the given value.
  ltiUserId_lt: String

  # All values less than or equal the given value.
  ltiUserId_lte: String

  # All values greater than the given value.
  ltiUserId_gt: String

  # All values greater than or equal the given value.
  ltiUserId_gte: String

  # All values containing the given string.
  ltiUserId_contains: String

  # All values not containing the given string.
  ltiUserId_not_contains: String

  # All values starting with the given string.
  ltiUserId_starts_with: String

  # All values not starting with the given string.
  ltiUserId_not_starts_with: String

  # All values ending with the given string.
  ltiUserId_ends_with: String

  # All values not ending with the given string.
  ltiUserId_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  user: UserFilter
}

type LTIUserSubscriptionPayload {
  mutation: _ModelMutationType!
  node: LTIUser
  updatedFields: [String!]
  previousValues: LTIUserPreviousValues
}

input LTIUseruserUser {
  email: String
  password: String
  role: UserRole
  enrolledCoursesIds: [ID!]
  enrolledCourses: [UserenrolledCoursesCourse!]
  ltiUsersIds: [ID!]
  ltiUsers: [UserltiUsersLTIUser!]
  ownedAssignmentsIds: [ID!]
  ownedAssignments: [UserownedAssignmentsAssignment!]
  ownedCoursesIds: [ID!]
  ownedCourses: [UserownedCoursesCourse!]
  ownedQuestionResponseRatingsIds: [ID!]
  ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!]
  ownedQuestionResponsesIds: [ID!]
  ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!]
  ownedQuestionsIds: [ID!]
  ownedQuestions: [UserownedQuestionsQuestion!]
  ownedQuizzesIds: [ID!]
  ownedQuizzes: [UserownedQuizzesQuiz!]
  purchasesIds: [ID!]
  purchases: [UserpurchasesPurchase!]
  questionRatingsIds: [ID!]
  questionRatings: [UserquestionRatingsQuestionRating!]
  userAnalyticsIds: [ID!]
  userAnalytics: [UseruserAnalyticsPrendusAnalytics!]
}

type Mutation {
  createAnswerComment(text: String!, questionId: ID, question: AnswerCommentquestionQuestion): AnswerComment
  createAssignment(numCreateQuestions: Int, numGradeResponses: Int, numResponseQuestions: Int, numReviewQuestions: Int, questionType: QuestionType, title: String!, authorId: ID, author: AssignmentauthorUser, courseId: ID, course: AssignmentcourseCourse, quizId: ID, quiz: AssignmentquizQuiz, analyticsIds: [ID!], analytics: [AssignmentanalyticsPrendusAnalytics!], conceptsIds: [ID!], concepts: [AssignmentconceptsConcept!], questionsIds: [ID!], questions: [AssignmentquestionsQuestion!]): Assignment
  createCategoryScore(category: String!, score: Int!, questionRatingId: ID, questionRating: CategoryScorequestionRatingQuestionRating, questionResponseRatingId: ID, questionResponseRating: CategoryScorequestionResponseRatingQuestionResponseRating): CategoryScore
  createConcept(title: String!, subjectId: ID, subject: ConceptsubjectSubject, assignmentsIds: [ID!], assignments: [ConceptassignmentsAssignment!], questionsIds: [ID!], questions: [ConceptquestionsQuestion!]): Concept
  createCourse(description: String, dueDate: DateTime, price: Int, title: String!, authorId: ID, author: CourseauthorUser, disciplineId: ID, discipline: CoursedisciplineDiscipline, subjectId: ID, subject: CoursesubjectSubject, analyticsIds: [ID!], analytics: [CourseanalyticsPrendusAnalytics!], assignmentsIds: [ID!], assignments: [CourseassignmentsAssignment!], enrolledStudentsIds: [ID!], enrolledStudents: [CourseenrolledStudentsUser!], purchasesIds: [ID!], purchases: [CoursepurchasesPurchase!]): Course
  createDiscipline(approved: PrendusApproved, title: String!, coursesIds: [ID!], courses: [DisciplinecoursesCourse!], subjectsIds: [ID!], subjects: [DisciplinesubjectsSubject!]): Discipline
  createFile(contentType: String!, name: String!, secret: String!, size: Int!, url: String!, questionId: ID, question: FilequestionQuestion): File
  createLTISession(ltiUserId: String!, serializedOutcomeService: Json!): LTISession
  createLTIUser(lisPersonContactEmailPrimary: String!, ltiUserId: String!, userId: ID, user: LTIUseruserUser): LTIUser
  createPrendusAnalytics(contextId: String, contextType: ContextType, object: String, verb: String!, assignmentId: ID, assignment: PrendusAnalyticsassignmentAssignment, courseId: ID, course: PrendusAnalyticscourseCourse, questionId: ID, question: PrendusAnalyticsquestionQuestion, userId: ID, user: PrendusAnalyticsuserUser): PrendusAnalytics
  createPurchase(amount: Int!, stripeTokenId: String!, courseId: ID, course: PurchasecourseCourse, userId: ID, user: PurchaseuserUser): Purchase
  createQuestion(code: String!, conceptAlignment: Int, difficulty: Int, explanation: String, inclusion: Int, language: Int, learningCategory: Int, overall: Int, plagiarism: Int, resource: String, text: String!, visibility: QuestionVisibility, assignmentId: ID, assignment: QuestionassignmentAssignment, authorId: ID, author: QuestionauthorUser, conceptId: ID, concept: QuestionconceptConcept, quizId: ID, quiz: QuestionquizQuiz, analyticsIds: [ID!], analytics: [QuestionanalyticsPrendusAnalytics!], answerCommentsIds: [ID!], answerComments: [QuestionanswerCommentsAnswerComment!], flagsIds: [ID!], flags: [QuestionflagsQuestionFlag!], imagesIds: [ID!], images: [QuestionimagesFile!], ratingsIds: [ID!], ratings: [QuestionratingsQuestionRating!], responsesIds: [ID!], responses: [QuestionresponsesQuestionResponse!]): Question
  createQuestionFlag(comment: String!, questionId: ID, question: QuestionFlagquestionQuestion): QuestionFlag
  createQuestionRating(ratingJson: Json, questionId: ID, question: QuestionRatingquestionQuestion, raterId: ID, rater: QuestionRatingraterUser, scoresIds: [ID!], scores: [QuestionRatingscoresCategoryScore!]): QuestionRating
  createQuestionResponse(authorId: ID, author: QuestionResponseauthorUser, questionId: ID, question: QuestionResponsequestionQuestion, ratingsIds: [ID!], ratings: [QuestionResponseratingsQuestionResponseRating!], userChecksIds: [ID!], userChecks: [QuestionResponseuserChecksUserCheck!], userEssaysIds: [ID!], userEssays: [QuestionResponseuserEssaysUserEssay!], userInputsIds: [ID!], userInputs: [QuestionResponseuserInputsUserInput!], userRadiosIds: [ID!], userRadios: [QuestionResponseuserRadiosUserRadio!], userVariablesIds: [ID!], userVariables: [QuestionResponseuserVariablesUserVariable!]): QuestionResponse
  createQuestionResponseRating(questionResponseId: ID, questionResponse: QuestionResponseRatingquestionResponseQuestionResponse, raterId: ID, rater: QuestionResponseRatingraterUser, scoresIds: [ID!], scores: [QuestionResponseRatingscoresCategoryScore!]): QuestionResponseRating
  createQuiz(title: String!, assignmentId: ID, assignment: QuizassignmentAssignment, authorId: ID, author: QuizauthorUser, questionsIds: [ID!], questions: [QuizquestionsQuestion!]): Quiz
  createSubject(approved: PrendusApproved, title: String!, disciplineId: ID, discipline: SubjectdisciplineDiscipline, conceptsIds: [ID!], concepts: [SubjectconceptsConcept!], coursesIds: [ID!], courses: [SubjectcoursesCourse!]): Subject
  createUserCheck(checked: Boolean!, varName: String!, questionResponseId: ID, questionResponse: UserCheckquestionResponseQuestionResponse): UserCheck
  createUserEssay(value: String!, varName: String!, questionResponseId: ID, questionResponse: UserEssayquestionResponseQuestionResponse): UserEssay
  createUserInput(value: String!, varName: String!, questionResponseId: ID, questionResponse: UserInputquestionResponseQuestionResponse): UserInput
  createUserRadio(checked: Boolean!, varName: String!, questionResponseId: ID, questionResponse: UserRadioquestionResponseQuestionResponse): UserRadio
  createUserVariable(value: Float!, varName: String!, questionResponseId: ID, questionResponse: UserVariablequestionResponseQuestionResponse): UserVariable
  updateAnswerComment(id: ID!, text: String, questionId: ID, question: AnswerCommentquestionQuestion): AnswerComment
  updateAssignment(id: ID!, numCreateQuestions: Int, numGradeResponses: Int, numResponseQuestions: Int, numReviewQuestions: Int, questionType: QuestionType, title: String, authorId: ID, author: AssignmentauthorUser, courseId: ID, course: AssignmentcourseCourse, quizId: ID, quiz: AssignmentquizQuiz, analyticsIds: [ID!], analytics: [AssignmentanalyticsPrendusAnalytics!], conceptsIds: [ID!], concepts: [AssignmentconceptsConcept!], questionsIds: [ID!], questions: [AssignmentquestionsQuestion!]): Assignment
  updateCategoryScore(category: String, id: ID!, score: Int, questionRatingId: ID, questionRating: CategoryScorequestionRatingQuestionRating, questionResponseRatingId: ID, questionResponseRating: CategoryScorequestionResponseRatingQuestionResponseRating): CategoryScore
  updateConcept(id: ID!, title: String, subjectId: ID, subject: ConceptsubjectSubject, assignmentsIds: [ID!], assignments: [ConceptassignmentsAssignment!], questionsIds: [ID!], questions: [ConceptquestionsQuestion!]): Concept
  updateCourse(description: String, dueDate: DateTime, id: ID!, price: Int, title: String, authorId: ID, author: CourseauthorUser, disciplineId: ID, discipline: CoursedisciplineDiscipline, subjectId: ID, subject: CoursesubjectSubject, analyticsIds: [ID!], analytics: [CourseanalyticsPrendusAnalytics!], assignmentsIds: [ID!], assignments: [CourseassignmentsAssignment!], enrolledStudentsIds: [ID!], enrolledStudents: [CourseenrolledStudentsUser!], purchasesIds: [ID!], purchases: [CoursepurchasesPurchase!]): Course
  updateDiscipline(approved: PrendusApproved, id: ID!, title: String, coursesIds: [ID!], courses: [DisciplinecoursesCourse!], subjectsIds: [ID!], subjects: [DisciplinesubjectsSubject!]): Discipline
  updateFile(contentType: String, id: ID!, name: String, secret: String, size: Int, url: String, questionId: ID, question: FilequestionQuestion): File
  updateLTISession(id: ID!, ltiUserId: String, serializedOutcomeService: Json): LTISession
  updateLTIUser(id: ID!, lisPersonContactEmailPrimary: String, ltiUserId: String, userId: ID, user: LTIUseruserUser): LTIUser
  updatePrendusAnalytics(contextId: String, contextType: ContextType, id: ID!, object: String, verb: String, assignmentId: ID, assignment: PrendusAnalyticsassignmentAssignment, courseId: ID, course: PrendusAnalyticscourseCourse, questionId: ID, question: PrendusAnalyticsquestionQuestion, userId: ID, user: PrendusAnalyticsuserUser): PrendusAnalytics
  updatePurchase(amount: Int, id: ID!, stripeTokenId: String, courseId: ID, course: PurchasecourseCourse, userId: ID, user: PurchaseuserUser): Purchase
  updateQuestion(code: String, conceptAlignment: Int, difficulty: Int, explanation: String, id: ID!, inclusion: Int, language: Int, learningCategory: Int, overall: Int, plagiarism: Int, resource: String, text: String, visibility: QuestionVisibility, assignmentId: ID, assignment: QuestionassignmentAssignment, authorId: ID, author: QuestionauthorUser, conceptId: ID, concept: QuestionconceptConcept, quizId: ID, quiz: QuestionquizQuiz, analyticsIds: [ID!], analytics: [QuestionanalyticsPrendusAnalytics!], answerCommentsIds: [ID!], answerComments: [QuestionanswerCommentsAnswerComment!], flagsIds: [ID!], flags: [QuestionflagsQuestionFlag!], imagesIds: [ID!], images: [QuestionimagesFile!], ratingsIds: [ID!], ratings: [QuestionratingsQuestionRating!], responsesIds: [ID!], responses: [QuestionresponsesQuestionResponse!]): Question
  updateQuestionFlag(comment: String, id: ID!, questionId: ID, question: QuestionFlagquestionQuestion): QuestionFlag
  updateQuestionRating(id: ID!, ratingJson: Json, questionId: ID, question: QuestionRatingquestionQuestion, raterId: ID, rater: QuestionRatingraterUser, scoresIds: [ID!], scores: [QuestionRatingscoresCategoryScore!]): QuestionRating
  updateQuestionResponse(id: ID!, authorId: ID, author: QuestionResponseauthorUser, questionId: ID, question: QuestionResponsequestionQuestion, ratingsIds: [ID!], ratings: [QuestionResponseratingsQuestionResponseRating!], userChecksIds: [ID!], userChecks: [QuestionResponseuserChecksUserCheck!], userEssaysIds: [ID!], userEssays: [QuestionResponseuserEssaysUserEssay!], userInputsIds: [ID!], userInputs: [QuestionResponseuserInputsUserInput!], userRadiosIds: [ID!], userRadios: [QuestionResponseuserRadiosUserRadio!], userVariablesIds: [ID!], userVariables: [QuestionResponseuserVariablesUserVariable!]): QuestionResponse
  updateQuestionResponseRating(id: ID!, questionResponseId: ID, questionResponse: QuestionResponseRatingquestionResponseQuestionResponse, raterId: ID, rater: QuestionResponseRatingraterUser, scoresIds: [ID!], scores: [QuestionResponseRatingscoresCategoryScore!]): QuestionResponseRating
  updateQuiz(id: ID!, title: String, assignmentId: ID, assignment: QuizassignmentAssignment, authorId: ID, author: QuizauthorUser, questionsIds: [ID!], questions: [QuizquestionsQuestion!]): Quiz
  updateSubject(approved: PrendusApproved, id: ID!, title: String, disciplineId: ID, discipline: SubjectdisciplineDiscipline, conceptsIds: [ID!], concepts: [SubjectconceptsConcept!], coursesIds: [ID!], courses: [SubjectcoursesCourse!]): Subject
  updateUser(email: String, id: ID!, password: String, role: UserRole, enrolledCoursesIds: [ID!], enrolledCourses: [UserenrolledCoursesCourse!], ltiUsersIds: [ID!], ltiUsers: [UserltiUsersLTIUser!], ownedAssignmentsIds: [ID!], ownedAssignments: [UserownedAssignmentsAssignment!], ownedCoursesIds: [ID!], ownedCourses: [UserownedCoursesCourse!], ownedQuestionResponseRatingsIds: [ID!], ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!], ownedQuestionResponsesIds: [ID!], ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!], ownedQuestionsIds: [ID!], ownedQuestions: [UserownedQuestionsQuestion!], ownedQuizzesIds: [ID!], ownedQuizzes: [UserownedQuizzesQuiz!], purchasesIds: [ID!], purchases: [UserpurchasesPurchase!], questionRatingsIds: [ID!], questionRatings: [UserquestionRatingsQuestionRating!], userAnalyticsIds: [ID!], userAnalytics: [UseruserAnalyticsPrendusAnalytics!]): User
  updateUserCheck(checked: Boolean, id: ID!, varName: String, questionResponseId: ID, questionResponse: UserCheckquestionResponseQuestionResponse): UserCheck
  updateUserEssay(id: ID!, value: String, varName: String, questionResponseId: ID, questionResponse: UserEssayquestionResponseQuestionResponse): UserEssay
  updateUserInput(id: ID!, value: String, varName: String, questionResponseId: ID, questionResponse: UserInputquestionResponseQuestionResponse): UserInput
  updateUserRadio(checked: Boolean, id: ID!, varName: String, questionResponseId: ID, questionResponse: UserRadioquestionResponseQuestionResponse): UserRadio
  updateUserVariable(id: ID!, value: Float, varName: String, questionResponseId: ID, questionResponse: UserVariablequestionResponseQuestionResponse): UserVariable
  updateOrCreateAnswerComment(update: UpdateAnswerComment!, create: CreateAnswerComment!): AnswerComment
  updateOrCreateAssignment(update: UpdateAssignment!, create: CreateAssignment!): Assignment
  updateOrCreateCategoryScore(update: UpdateCategoryScore!, create: CreateCategoryScore!): CategoryScore
  updateOrCreateConcept(update: UpdateConcept!, create: CreateConcept!): Concept
  updateOrCreateCourse(update: UpdateCourse!, create: CreateCourse!): Course
  updateOrCreateDiscipline(update: UpdateDiscipline!, create: CreateDiscipline!): Discipline
  updateOrCreateFile(update: UpdateFile!, create: CreateFile!): File
  updateOrCreateLTISession(update: UpdateLTISession!, create: CreateLTISession!): LTISession
  updateOrCreateLTIUser(update: UpdateLTIUser!, create: CreateLTIUser!): LTIUser
  updateOrCreatePrendusAnalytics(update: UpdatePrendusAnalytics!, create: CreatePrendusAnalytics!): PrendusAnalytics
  updateOrCreatePurchase(update: UpdatePurchase!, create: CreatePurchase!): Purchase
  updateOrCreateQuestion(update: UpdateQuestion!, create: CreateQuestion!): Question
  updateOrCreateQuestionFlag(update: UpdateQuestionFlag!, create: CreateQuestionFlag!): QuestionFlag
  updateOrCreateQuestionRating(update: UpdateQuestionRating!, create: CreateQuestionRating!): QuestionRating
  updateOrCreateQuestionResponse(update: UpdateQuestionResponse!, create: CreateQuestionResponse!): QuestionResponse
  updateOrCreateQuestionResponseRating(update: UpdateQuestionResponseRating!, create: CreateQuestionResponseRating!): QuestionResponseRating
  updateOrCreateQuiz(update: UpdateQuiz!, create: CreateQuiz!): Quiz
  updateOrCreateSubject(update: UpdateSubject!, create: CreateSubject!): Subject
  updateOrCreateUser(update: UpdateUser!, create: CreateUser!): User
  updateOrCreateUserCheck(update: UpdateUserCheck!, create: CreateUserCheck!): UserCheck
  updateOrCreateUserEssay(update: UpdateUserEssay!, create: CreateUserEssay!): UserEssay
  updateOrCreateUserInput(update: UpdateUserInput!, create: CreateUserInput!): UserInput
  updateOrCreateUserRadio(update: UpdateUserRadio!, create: CreateUserRadio!): UserRadio
  updateOrCreateUserVariable(update: UpdateUserVariable!, create: CreateUserVariable!): UserVariable
  deleteAnswerComment(id: ID!): AnswerComment
  deleteAssignment(id: ID!): Assignment
  deleteCategoryScore(id: ID!): CategoryScore
  deleteConcept(id: ID!): Concept
  deleteCourse(id: ID!): Course
  deleteDiscipline(id: ID!): Discipline
  deleteFile(id: ID!): File
  deleteLTISession(id: ID!): LTISession
  deleteLTIUser(id: ID!): LTIUser
  deletePrendusAnalytics(id: ID!): PrendusAnalytics
  deletePurchase(id: ID!): Purchase
  deleteQuestion(id: ID!): Question
  deleteQuestionFlag(id: ID!): QuestionFlag
  deleteQuestionRating(id: ID!): QuestionRating
  deleteQuestionResponse(id: ID!): QuestionResponse
  deleteQuestionResponseRating(id: ID!): QuestionResponseRating
  deleteQuiz(id: ID!): Quiz
  deleteSubject(id: ID!): Subject
  deleteUser(id: ID!): User
  deleteUserCheck(id: ID!): UserCheck
  deleteUserEssay(id: ID!): UserEssay
  deleteUserInput(id: ID!): UserInput
  deleteUserRadio(id: ID!): UserRadio
  deleteUserVariable(id: ID!): UserVariable
  setAssignmentOnQuiz(quizQuizId: ID!, assignmentAssignmentId: ID!): SetAssignmentOnQuizPayload
  unsetAssignmentOnQuiz(quizQuizId: ID!, assignmentAssignmentId: ID!): UnsetAssignmentOnQuizPayload
  addToAssignmentOnConcepts(conceptsConceptId: ID!, assignmentsAssignmentId: ID!): AddToAssignmentOnConceptsPayload
  addToAssignmentOnPrendusAnalytics(analyticsPrendusAnalyticsId: ID!, assignmentAssignmentId: ID!): AddToAssignmentOnPrendusAnalyticsPayload
  addToAssignmentQuestions(questionsQuestionId: ID!, assignmentAssignmentId: ID!): AddToAssignmentQuestionsPayload
  addToAuthorOnAssignment(ownedAssignmentsAssignmentId: ID!, authorUserId: ID!): AddToAuthorOnAssignmentPayload
  addToAuthorOnCourse(ownedCoursesCourseId: ID!, authorUserId: ID!): AddToAuthorOnCoursePayload
  addToAuthorOnQuestion(ownedQuestionsQuestionId: ID!, authorUserId: ID!): AddToAuthorOnQuestionPayload
  addToAuthorOnQuestionResponse(ownedQuestionResponsesQuestionResponseId: ID!, authorUserId: ID!): AddToAuthorOnQuestionResponsePayload
  addToAuthorOnQuiz(ownedQuizzesQuizId: ID!, authorUserId: ID!): AddToAuthorOnQuizPayload
  addToConceptOnQuestion(conceptConceptId: ID!, questionsQuestionId: ID!): AddToConceptOnQuestionPayload
  addToCourseDiscipline(disciplineDisciplineId: ID!, coursesCourseId: ID!): AddToCourseDisciplinePayload
  addToCourseOnAssignment(assignmentsAssignmentId: ID!, courseCourseId: ID!): AddToCourseOnAssignmentPayload
  addToCourseOnPrendusAnalytics(analyticsPrendusAnalyticsId: ID!, courseCourseId: ID!): AddToCourseOnPrendusAnalyticsPayload
  addToCoursePurchased(purchasesPurchaseId: ID!, courseCourseId: ID!): AddToCoursePurchasedPayload
  addToCourseSubject(subjectSubjectId: ID!, coursesCourseId: ID!): AddToCourseSubjectPayload
  addToDisciplineOnSubject(subjectsSubjectId: ID!, disciplineDisciplineId: ID!): AddToDisciplineOnSubjectPayload
  addToFlagOnQuestion(flagsQuestionFlagId: ID!, questionQuestionId: ID!): AddToFlagOnQuestionPayload
  addToImagesOnQuestions(questionQuestionId: ID!, imagesFileId: ID!): AddToImagesOnQuestionsPayload
  addToQuestionOnAnswerComment(answerCommentsAnswerCommentId: ID!, questionQuestionId: ID!): AddToQuestionOnAnswerCommentPayload
  addToQuestionOnPrendusAnalytics(analyticsPrendusAnalyticsId: ID!, questionQuestionId: ID!): AddToQuestionOnPrendusAnalyticsPayload
  addToQuestionOnQuestionRating(ratingsQuestionRatingId: ID!, questionQuestionId: ID!): AddToQuestionOnQuestionRatingPayload
  addToQuestionOnQuestionResponse(responsesQuestionResponseId: ID!, questionQuestionId: ID!): AddToQuestionOnQuestionResponsePayload
  addToQuizOnQuestion(questionsQuestionId: ID!, quizQuizId: ID!): AddToQuizOnQuestionPayload
  addToRaterOnQuestionRating(questionRatingsQuestionRatingId: ID!, raterUserId: ID!): AddToRaterOnQuestionRatingPayload
  addToRaterOnQuestionResponseRating(ownedQuestionResponseRatingsQuestionResponseRatingId: ID!, raterUserId: ID!): AddToRaterOnQuestionResponseRatingPayload
  addToRatingsOnQuestionResponse(ratingsQuestionResponseRatingId: ID!, questionResponseQuestionResponseId: ID!): AddToRatingsOnQuestionResponsePayload
  addToScoresOnQuestionRating(scoresCategoryScoreId: ID!, questionRatingQuestionRatingId: ID!): AddToScoresOnQuestionRatingPayload
  addToScoresOnQuestionResponseRating(scoresCategoryScoreId: ID!, questionResponseRatingQuestionResponseRatingId: ID!): AddToScoresOnQuestionResponseRatingPayload
  addToStudentsAndCourses(enrolledCoursesCourseId: ID!, enrolledStudentsUserId: ID!): AddToStudentsAndCoursesPayload
  addToSubjectOnConcept(conceptsConceptId: ID!, subjectSubjectId: ID!): AddToSubjectOnConceptPayload
  addToUserChecksOnQuestionResponse(userChecksUserCheckId: ID!, questionResponseQuestionResponseId: ID!): AddToUserChecksOnQuestionResponsePayload
  addToUserEssaysOnQuestionResponse(userEssaysUserEssayId: ID!, questionResponseQuestionResponseId: ID!): AddToUserEssaysOnQuestionResponsePayload
  addToUserInputsOnQuestionResponse(userInputsUserInputId: ID!, questionResponseQuestionResponseId: ID!): AddToUserInputsOnQuestionResponsePayload
  addToUserOnLTIUser(ltiUsersLTIUserId: ID!, userUserId: ID!): AddToUserOnLTIUserPayload
  addToUserOnPrendusAnalytics(userAnalyticsPrendusAnalyticsId: ID!, userUserId: ID!): AddToUserOnPrendusAnalyticsPayload
  addToUserPurchases(purchasesPurchaseId: ID!, userUserId: ID!): AddToUserPurchasesPayload
  addToUserRadiosOnQuestionResponse(userRadiosUserRadioId: ID!, questionResponseQuestionResponseId: ID!): AddToUserRadiosOnQuestionResponsePayload
  addToUserVariablesOnQuestionResponse(userVariablesUserVariableId: ID!, questionResponseQuestionResponseId: ID!): AddToUserVariablesOnQuestionResponsePayload
  removeFromAssignmentOnConcepts(conceptsConceptId: ID!, assignmentsAssignmentId: ID!): RemoveFromAssignmentOnConceptsPayload
  removeFromAssignmentOnPrendusAnalytics(analyticsPrendusAnalyticsId: ID!, assignmentAssignmentId: ID!): RemoveFromAssignmentOnPrendusAnalyticsPayload
  removeFromAssignmentQuestions(questionsQuestionId: ID!, assignmentAssignmentId: ID!): RemoveFromAssignmentQuestionsPayload
  removeFromConceptOnQuestion(conceptConceptId: ID!, questionsQuestionId: ID!): RemoveFromConceptOnQuestionPayload
  removeFromCourseDiscipline(disciplineDisciplineId: ID!, coursesCourseId: ID!): RemoveFromCourseDisciplinePayload
  removeFromCourseOnAssignment(assignmentsAssignmentId: ID!, courseCourseId: ID!): RemoveFromCourseOnAssignmentPayload
  removeFromCourseOnPrendusAnalytics(analyticsPrendusAnalyticsId: ID!, courseCourseId: ID!): RemoveFromCourseOnPrendusAnalyticsPayload
  removeFromCoursePurchased(purchasesPurchaseId: ID!, courseCourseId: ID!): RemoveFromCoursePurchasedPayload
  removeFromCourseSubject(subjectSubjectId: ID!, coursesCourseId: ID!): RemoveFromCourseSubjectPayload
  removeFromImagesOnQuestions(questionQuestionId: ID!, imagesFileId: ID!): RemoveFromImagesOnQuestionsPayload
  removeFromQuestionOnPrendusAnalytics(analyticsPrendusAnalyticsId: ID!, questionQuestionId: ID!): RemoveFromQuestionOnPrendusAnalyticsPayload
  removeFromQuizOnQuestion(questionsQuestionId: ID!, quizQuizId: ID!): RemoveFromQuizOnQuestionPayload
  removeFromScoresOnQuestionRating(scoresCategoryScoreId: ID!, questionRatingQuestionRatingId: ID!): RemoveFromScoresOnQuestionRatingPayload
  removeFromScoresOnQuestionResponseRating(scoresCategoryScoreId: ID!, questionResponseRatingQuestionResponseRatingId: ID!): RemoveFromScoresOnQuestionResponseRatingPayload
  removeFromStudentsAndCourses(enrolledCoursesCourseId: ID!, enrolledStudentsUserId: ID!): RemoveFromStudentsAndCoursesPayload
  removeFromUserOnPrendusAnalytics(userAnalyticsPrendusAnalyticsId: ID!, userUserId: ID!): RemoveFromUserOnPrendusAnalyticsPayload
  createUser(email: String, password: String, role: UserRole, enrolledCoursesIds: [ID!], enrolledCourses: [UserenrolledCoursesCourse!], ltiUsersIds: [ID!], ltiUsers: [UserltiUsersLTIUser!], ownedAssignmentsIds: [ID!], ownedAssignments: [UserownedAssignmentsAssignment!], ownedCoursesIds: [ID!], ownedCourses: [UserownedCoursesCourse!], ownedQuestionResponseRatingsIds: [ID!], ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!], ownedQuestionResponsesIds: [ID!], ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!], ownedQuestionsIds: [ID!], ownedQuestions: [UserownedQuestionsQuestion!], ownedQuizzesIds: [ID!], ownedQuizzes: [UserownedQuizzesQuiz!], purchasesIds: [ID!], purchases: [UserpurchasesPurchase!], questionRatingsIds: [ID!], questionRatings: [UserquestionRatingsQuestionRating!], userAnalyticsIds: [ID!], userAnalytics: [UseruserAnalyticsPrendusAnalytics!]): User

  # add-lti-user
  addLTIUser(userId: ID!, jwt: String!): AddLTIUserPayload

  # assignment-lti-grade
  assignmentLTIGrade(ltiSessionIdJWT: String!): AssignmentLTIGradePayload

  # assignment-lti-launch
  assignmentLTILaunch(assignmentId: String!, assignmentType: String!, requestBody: String!, path: String!, method: String!): AssignmentLTILaunchPayload

  # authenticate
  authenticateUser(email: String!, password: String!): AuthenticateUserPayload

  # course-payment
  coursePayment(userId: ID!, courseId: ID!, stripeTokenId: String!, amount: Int!, userEmail: String!): CoursePaymentPayload

  # request-password-reset
  requestPasswordReset(email: String!): RequestPasswordResetPayload

  # reset-password
  resetPassword(email: String!, newPassword: String!, jwt: String!): ResetPasswordPayload

  # signup
  signupUser(email: String!, password: String!): SignupUserPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type PrendusAnalytics implements Node {
  assignment(filter: AssignmentFilter): Assignment
  contextId: String
  contextType: ContextType
  course(filter: CourseFilter): Course
  createdAt: DateTime!
  id: ID!
  object: String
  question(filter: QuestionFilter): Question
  updatedAt: DateTime!
  user(filter: UserFilter): User
  verb: String!
}

input PrendusAnalyticsassignmentAssignment {
  numCreateQuestions: Int
  numGradeResponses: Int
  numResponseQuestions: Int
  numReviewQuestions: Int
  questionType: QuestionType
  title: String!
  authorId: ID
  author: AssignmentauthorUser
  courseId: ID
  course: AssignmentcourseCourse
  quizId: ID
  quiz: AssignmentquizQuiz
  analyticsIds: [ID!]
  analytics: [AssignmentanalyticsPrendusAnalytics!]
  conceptsIds: [ID!]
  concepts: [AssignmentconceptsConcept!]
  questionsIds: [ID!]
  questions: [AssignmentquestionsQuestion!]
}

input PrendusAnalyticscourseCourse {
  description: String
  dueDate: DateTime
  price: Int
  title: String!
  authorId: ID
  author: CourseauthorUser
  disciplineId: ID
  discipline: CoursedisciplineDiscipline
  subjectId: ID
  subject: CoursesubjectSubject
  analyticsIds: [ID!]
  analytics: [CourseanalyticsPrendusAnalytics!]
  assignmentsIds: [ID!]
  assignments: [CourseassignmentsAssignment!]
  enrolledStudentsIds: [ID!]
  enrolledStudents: [CourseenrolledStudentsUser!]
  purchasesIds: [ID!]
  purchases: [CoursepurchasesPurchase!]
}

input PrendusAnalyticsFilter {
  # Logical AND on all given filters.
  AND: [PrendusAnalyticsFilter!]

  # Logical OR on all given filters.
  OR: [PrendusAnalyticsFilter!]
  contextId: String

  # All values that are not equal to given value.
  contextId_not: String

  # All values that are contained in given list.
  contextId_in: [String!]

  # All values that are not contained in given list.
  contextId_not_in: [String!]

  # All values less than the given value.
  contextId_lt: String

  # All values less than or equal the given value.
  contextId_lte: String

  # All values greater than the given value.
  contextId_gt: String

  # All values greater than or equal the given value.
  contextId_gte: String

  # All values containing the given string.
  contextId_contains: String

  # All values not containing the given string.
  contextId_not_contains: String

  # All values starting with the given string.
  contextId_starts_with: String

  # All values not starting with the given string.
  contextId_not_starts_with: String

  # All values ending with the given string.
  contextId_ends_with: String

  # All values not ending with the given string.
  contextId_not_ends_with: String
  contextType: ContextType

  # All values that are not equal to given value.
  contextType_not: ContextType

  # All values that are contained in given list.
  contextType_in: [ContextType!]

  # All values that are not contained in given list.
  contextType_not_in: [ContextType!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  object: String

  # All values that are not equal to given value.
  object_not: String

  # All values that are contained in given list.
  object_in: [String!]

  # All values that are not contained in given list.
  object_not_in: [String!]

  # All values less than the given value.
  object_lt: String

  # All values less than or equal the given value.
  object_lte: String

  # All values greater than the given value.
  object_gt: String

  # All values greater than or equal the given value.
  object_gte: String

  # All values containing the given string.
  object_contains: String

  # All values not containing the given string.
  object_not_contains: String

  # All values starting with the given string.
  object_starts_with: String

  # All values not starting with the given string.
  object_not_starts_with: String

  # All values ending with the given string.
  object_ends_with: String

  # All values not ending with the given string.
  object_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  verb: String

  # All values that are not equal to given value.
  verb_not: String

  # All values that are contained in given list.
  verb_in: [String!]

  # All values that are not contained in given list.
  verb_not_in: [String!]

  # All values less than the given value.
  verb_lt: String

  # All values less than or equal the given value.
  verb_lte: String

  # All values greater than the given value.
  verb_gt: String

  # All values greater than or equal the given value.
  verb_gte: String

  # All values containing the given string.
  verb_contains: String

  # All values not containing the given string.
  verb_not_contains: String

  # All values starting with the given string.
  verb_starts_with: String

  # All values not starting with the given string.
  verb_not_starts_with: String

  # All values ending with the given string.
  verb_ends_with: String

  # All values not ending with the given string.
  verb_not_ends_with: String
  assignment: AssignmentFilter
  course: CourseFilter
  question: QuestionFilter
  user: UserFilter
}

enum PrendusAnalyticsOrderBy {
  contextId_ASC
  contextId_DESC
  contextType_ASC
  contextType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  object_ASC
  object_DESC
  updatedAt_ASC
  updatedAt_DESC
  verb_ASC
  verb_DESC
}

type PrendusAnalyticsPreviousValues {
  contextId: String
  contextType: ContextType
  createdAt: DateTime!
  id: ID!
  object: String
  updatedAt: DateTime!
  verb: String!
}

input PrendusAnalyticsquestionQuestion {
  code: String!
  conceptAlignment: Int
  difficulty: Int
  explanation: String
  inclusion: Int
  language: Int
  learningCategory: Int
  overall: Int
  plagiarism: Int
  resource: String
  text: String!
  visibility: QuestionVisibility
  assignmentId: ID
  assignment: QuestionassignmentAssignment
  authorId: ID
  author: QuestionauthorUser
  conceptId: ID
  concept: QuestionconceptConcept
  quizId: ID
  quiz: QuestionquizQuiz
  analyticsIds: [ID!]
  analytics: [QuestionanalyticsPrendusAnalytics!]
  answerCommentsIds: [ID!]
  answerComments: [QuestionanswerCommentsAnswerComment!]
  flagsIds: [ID!]
  flags: [QuestionflagsQuestionFlag!]
  imagesIds: [ID!]
  images: [QuestionimagesFile!]
  ratingsIds: [ID!]
  ratings: [QuestionratingsQuestionRating!]
  responsesIds: [ID!]
  responses: [QuestionresponsesQuestionResponse!]
}

input PrendusAnalyticsSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [PrendusAnalyticsSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [PrendusAnalyticsSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: PrendusAnalyticsSubscriptionFilterNode
}

input PrendusAnalyticsSubscriptionFilterNode {
  contextId: String

  # All values that are not equal to given value.
  contextId_not: String

  # All values that are contained in given list.
  contextId_in: [String!]

  # All values that are not contained in given list.
  contextId_not_in: [String!]

  # All values less than the given value.
  contextId_lt: String

  # All values less than or equal the given value.
  contextId_lte: String

  # All values greater than the given value.
  contextId_gt: String

  # All values greater than or equal the given value.
  contextId_gte: String

  # All values containing the given string.
  contextId_contains: String

  # All values not containing the given string.
  contextId_not_contains: String

  # All values starting with the given string.
  contextId_starts_with: String

  # All values not starting with the given string.
  contextId_not_starts_with: String

  # All values ending with the given string.
  contextId_ends_with: String

  # All values not ending with the given string.
  contextId_not_ends_with: String
  contextType: ContextType

  # All values that are not equal to given value.
  contextType_not: ContextType

  # All values that are contained in given list.
  contextType_in: [ContextType!]

  # All values that are not contained in given list.
  contextType_not_in: [ContextType!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  object: String

  # All values that are not equal to given value.
  object_not: String

  # All values that are contained in given list.
  object_in: [String!]

  # All values that are not contained in given list.
  object_not_in: [String!]

  # All values less than the given value.
  object_lt: String

  # All values less than or equal the given value.
  object_lte: String

  # All values greater than the given value.
  object_gt: String

  # All values greater than or equal the given value.
  object_gte: String

  # All values containing the given string.
  object_contains: String

  # All values not containing the given string.
  object_not_contains: String

  # All values starting with the given string.
  object_starts_with: String

  # All values not starting with the given string.
  object_not_starts_with: String

  # All values ending with the given string.
  object_ends_with: String

  # All values not ending with the given string.
  object_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  verb: String

  # All values that are not equal to given value.
  verb_not: String

  # All values that are contained in given list.
  verb_in: [String!]

  # All values that are not contained in given list.
  verb_not_in: [String!]

  # All values less than the given value.
  verb_lt: String

  # All values less than or equal the given value.
  verb_lte: String

  # All values greater than the given value.
  verb_gt: String

  # All values greater than or equal the given value.
  verb_gte: String

  # All values containing the given string.
  verb_contains: String

  # All values not containing the given string.
  verb_not_contains: String

  # All values starting with the given string.
  verb_starts_with: String

  # All values not starting with the given string.
  verb_not_starts_with: String

  # All values ending with the given string.
  verb_ends_with: String

  # All values not ending with the given string.
  verb_not_ends_with: String
  assignment: AssignmentFilter
  course: CourseFilter
  question: QuestionFilter
  user: UserFilter
}

type PrendusAnalyticsSubscriptionPayload {
  mutation: _ModelMutationType!
  node: PrendusAnalytics
  updatedFields: [String!]
  previousValues: PrendusAnalyticsPreviousValues
}

input PrendusAnalyticsuserUser {
  email: String
  password: String
  role: UserRole
  enrolledCoursesIds: [ID!]
  enrolledCourses: [UserenrolledCoursesCourse!]
  ltiUsersIds: [ID!]
  ltiUsers: [UserltiUsersLTIUser!]
  ownedAssignmentsIds: [ID!]
  ownedAssignments: [UserownedAssignmentsAssignment!]
  ownedCoursesIds: [ID!]
  ownedCourses: [UserownedCoursesCourse!]
  ownedQuestionResponseRatingsIds: [ID!]
  ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!]
  ownedQuestionResponsesIds: [ID!]
  ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!]
  ownedQuestionsIds: [ID!]
  ownedQuestions: [UserownedQuestionsQuestion!]
  ownedQuizzesIds: [ID!]
  ownedQuizzes: [UserownedQuizzesQuiz!]
  purchasesIds: [ID!]
  purchases: [UserpurchasesPurchase!]
  questionRatingsIds: [ID!]
  questionRatings: [UserquestionRatingsQuestionRating!]
  userAnalyticsIds: [ID!]
  userAnalytics: [UseruserAnalyticsPrendusAnalytics!]
}

enum PrendusApproved {
  YES
  NO
  TBD
}

type Purchase implements Node {
  amount: Int!
  course(filter: CourseFilter): Course
  createdAt: DateTime!
  id: ID!
  stripeTokenId: String!
  updatedAt: DateTime!
  user(filter: UserFilter): User!
}

input PurchasecourseCourse {
  description: String
  dueDate: DateTime
  price: Int
  title: String!
  authorId: ID
  author: CourseauthorUser
  disciplineId: ID
  discipline: CoursedisciplineDiscipline
  subjectId: ID
  subject: CoursesubjectSubject
  analyticsIds: [ID!]
  analytics: [CourseanalyticsPrendusAnalytics!]
  assignmentsIds: [ID!]
  assignments: [CourseassignmentsAssignment!]
  enrolledStudentsIds: [ID!]
  enrolledStudents: [CourseenrolledStudentsUser!]
  purchasesIds: [ID!]
  purchases: [CoursepurchasesPurchase!]
}

input PurchaseFilter {
  # Logical AND on all given filters.
  AND: [PurchaseFilter!]

  # Logical OR on all given filters.
  OR: [PurchaseFilter!]
  amount: Int

  # All values that are not equal to given value.
  amount_not: Int

  # All values that are contained in given list.
  amount_in: [Int!]

  # All values that are not contained in given list.
  amount_not_in: [Int!]

  # All values less than the given value.
  amount_lt: Int

  # All values less than or equal the given value.
  amount_lte: Int

  # All values greater than the given value.
  amount_gt: Int

  # All values greater than or equal the given value.
  amount_gte: Int
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  stripeTokenId: String

  # All values that are not equal to given value.
  stripeTokenId_not: String

  # All values that are contained in given list.
  stripeTokenId_in: [String!]

  # All values that are not contained in given list.
  stripeTokenId_not_in: [String!]

  # All values less than the given value.
  stripeTokenId_lt: String

  # All values less than or equal the given value.
  stripeTokenId_lte: String

  # All values greater than the given value.
  stripeTokenId_gt: String

  # All values greater than or equal the given value.
  stripeTokenId_gte: String

  # All values containing the given string.
  stripeTokenId_contains: String

  # All values not containing the given string.
  stripeTokenId_not_contains: String

  # All values starting with the given string.
  stripeTokenId_starts_with: String

  # All values not starting with the given string.
  stripeTokenId_not_starts_with: String

  # All values ending with the given string.
  stripeTokenId_ends_with: String

  # All values not ending with the given string.
  stripeTokenId_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  course: CourseFilter
  user: UserFilter
}

enum PurchaseOrderBy {
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  stripeTokenId_ASC
  stripeTokenId_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PurchasePreviousValues {
  amount: Int!
  createdAt: DateTime!
  id: ID!
  stripeTokenId: String!
  updatedAt: DateTime!
}

input PurchaseSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [PurchaseSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [PurchaseSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: PurchaseSubscriptionFilterNode
}

input PurchaseSubscriptionFilterNode {
  amount: Int

  # All values that are not equal to given value.
  amount_not: Int

  # All values that are contained in given list.
  amount_in: [Int!]

  # All values that are not contained in given list.
  amount_not_in: [Int!]

  # All values less than the given value.
  amount_lt: Int

  # All values less than or equal the given value.
  amount_lte: Int

  # All values greater than the given value.
  amount_gt: Int

  # All values greater than or equal the given value.
  amount_gte: Int
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  stripeTokenId: String

  # All values that are not equal to given value.
  stripeTokenId_not: String

  # All values that are contained in given list.
  stripeTokenId_in: [String!]

  # All values that are not contained in given list.
  stripeTokenId_not_in: [String!]

  # All values less than the given value.
  stripeTokenId_lt: String

  # All values less than or equal the given value.
  stripeTokenId_lte: String

  # All values greater than the given value.
  stripeTokenId_gt: String

  # All values greater than or equal the given value.
  stripeTokenId_gte: String

  # All values containing the given string.
  stripeTokenId_contains: String

  # All values not containing the given string.
  stripeTokenId_not_contains: String

  # All values starting with the given string.
  stripeTokenId_starts_with: String

  # All values not starting with the given string.
  stripeTokenId_not_starts_with: String

  # All values ending with the given string.
  stripeTokenId_ends_with: String

  # All values not ending with the given string.
  stripeTokenId_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  course: CourseFilter
  user: UserFilter
}

type PurchaseSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Purchase
  updatedFields: [String!]
  previousValues: PurchasePreviousValues
}

input PurchaseuserUser {
  email: String
  password: String
  role: UserRole
  enrolledCoursesIds: [ID!]
  enrolledCourses: [UserenrolledCoursesCourse!]
  ltiUsersIds: [ID!]
  ltiUsers: [UserltiUsersLTIUser!]
  ownedAssignmentsIds: [ID!]
  ownedAssignments: [UserownedAssignmentsAssignment!]
  ownedCoursesIds: [ID!]
  ownedCourses: [UserownedCoursesCourse!]
  ownedQuestionResponseRatingsIds: [ID!]
  ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!]
  ownedQuestionResponsesIds: [ID!]
  ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!]
  ownedQuestionsIds: [ID!]
  ownedQuestions: [UserownedQuestionsQuestion!]
  ownedQuizzesIds: [ID!]
  ownedQuizzes: [UserownedQuizzesQuiz!]
  purchasesIds: [ID!]
  purchases: [UserpurchasesPurchase!]
  questionRatingsIds: [ID!]
  questionRatings: [UserquestionRatingsQuestionRating!]
  userAnalyticsIds: [ID!]
  userAnalytics: [UseruserAnalyticsPrendusAnalytics!]
}

type Query {
  allAnswerComments(filter: AnswerCommentFilter, orderBy: AnswerCommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [AnswerComment!]!
  allAssignments(filter: AssignmentFilter, orderBy: AssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Assignment!]!
  allCategoryScores(filter: CategoryScoreFilter, orderBy: CategoryScoreOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [CategoryScore!]!
  allConcepts(filter: ConceptFilter, orderBy: ConceptOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]!
  allCourses(filter: CourseFilter, orderBy: CourseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]!
  allDisciplines(filter: DisciplineFilter, orderBy: DisciplineOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Discipline!]!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [File!]!
  allLTISessions(filter: LTISessionFilter, orderBy: LTISessionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [LTISession!]!
  allLTIUsers(filter: LTIUserFilter, orderBy: LTIUserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [LTIUser!]!
  allPrendusAnalyticses(filter: PrendusAnalyticsFilter, orderBy: PrendusAnalyticsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PrendusAnalytics!]!
  allPurchases(filter: PurchaseFilter, orderBy: PurchaseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Purchase!]!
  allQuestions(filter: QuestionFilter, orderBy: QuestionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]!
  allQuestionFlags(filter: QuestionFlagFilter, orderBy: QuestionFlagOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionFlag!]!
  allQuestionRatings(filter: QuestionRatingFilter, orderBy: QuestionRatingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionRating!]!
  allQuestionResponses(filter: QuestionResponseFilter, orderBy: QuestionResponseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionResponse!]!
  allQuestionResponseRatings(filter: QuestionResponseRatingFilter, orderBy: QuestionResponseRatingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionResponseRating!]!
  allQuizzes(filter: QuizFilter, orderBy: QuizOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]!
  allSubjects(filter: SubjectFilter, orderBy: SubjectOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]!
  allUserChecks(filter: UserCheckFilter, orderBy: UserCheckOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [UserCheck!]!
  allUserEssays(filter: UserEssayFilter, orderBy: UserEssayOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [UserEssay!]!
  allUserInputs(filter: UserInputFilter, orderBy: UserInputOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [UserInput!]!
  allUserRadios(filter: UserRadioFilter, orderBy: UserRadioOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [UserRadio!]!
  allUserVariables(filter: UserVariableFilter, orderBy: UserVariableOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [UserVariable!]!
  _allAnswerCommentsMeta(filter: AnswerCommentFilter, orderBy: AnswerCommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allAssignmentsMeta(filter: AssignmentFilter, orderBy: AssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allCategoryScoresMeta(filter: CategoryScoreFilter, orderBy: CategoryScoreOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allConceptsMeta(filter: ConceptFilter, orderBy: ConceptOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allCoursesMeta(filter: CourseFilter, orderBy: CourseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allDisciplinesMeta(filter: DisciplineFilter, orderBy: DisciplineOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allFilesMeta(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allLTISessionsMeta(filter: LTISessionFilter, orderBy: LTISessionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allLTIUsersMeta(filter: LTIUserFilter, orderBy: LTIUserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allPrendusAnalyticsesMeta(filter: PrendusAnalyticsFilter, orderBy: PrendusAnalyticsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allPurchasesMeta(filter: PurchaseFilter, orderBy: PurchaseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allQuestionsMeta(filter: QuestionFilter, orderBy: QuestionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allQuestionFlagsMeta(filter: QuestionFlagFilter, orderBy: QuestionFlagOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allQuestionRatingsMeta(filter: QuestionRatingFilter, orderBy: QuestionRatingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allQuestionResponsesMeta(filter: QuestionResponseFilter, orderBy: QuestionResponseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allQuestionResponseRatingsMeta(filter: QuestionResponseRatingFilter, orderBy: QuestionResponseRatingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allQuizzesMeta(filter: QuizFilter, orderBy: QuizOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allSubjectsMeta(filter: SubjectFilter, orderBy: SubjectOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allUsersMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allUserChecksMeta(filter: UserCheckFilter, orderBy: UserCheckOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allUserEssaysMeta(filter: UserEssayFilter, orderBy: UserEssayOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allUserInputsMeta(filter: UserInputFilter, orderBy: UserInputOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allUserRadiosMeta(filter: UserRadioFilter, orderBy: UserRadioOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allUserVariablesMeta(filter: UserVariableFilter, orderBy: UserVariableOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  AnswerComment(id: ID): AnswerComment
  Assignment(id: ID): Assignment
  CategoryScore(id: ID): CategoryScore
  Concept(id: ID): Concept
  Course(id: ID): Course
  Discipline(id: ID): Discipline
  File(id: ID, secret: String, url: String): File
  LTISession(id: ID): LTISession
  LTIUser(id: ID, ltiUserId: String): LTIUser
  PrendusAnalytics(id: ID): PrendusAnalytics
  Purchase(id: ID): Purchase
  Question(id: ID): Question
  QuestionFlag(id: ID): QuestionFlag
  QuestionRating(id: ID): QuestionRating
  QuestionResponse(id: ID): QuestionResponse
  QuestionResponseRating(id: ID): QuestionResponseRating
  Quiz(id: ID): Quiz
  Subject(id: ID): Subject
  User(email: String, id: ID): User
  UserCheck(id: ID): UserCheck
  UserEssay(id: ID): UserEssay
  UserInput(id: ID): UserInput
  UserRadio(id: ID): UserRadio
  UserVariable(id: ID): UserVariable
  user: User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Question implements Node {
  analytics(filter: PrendusAnalyticsFilter, orderBy: PrendusAnalyticsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PrendusAnalytics!]
  answerComments(filter: AnswerCommentFilter, orderBy: AnswerCommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [AnswerComment!]
  assignment(filter: AssignmentFilter): Assignment
  author(filter: UserFilter): User!
  code: String!
  concept(filter: ConceptFilter): Concept
  conceptAlignment: Int!
  createdAt: DateTime!
  difficulty: Int!
  explanation: String
  flags(filter: QuestionFlagFilter, orderBy: QuestionFlagOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionFlag!]
  id: ID!
  images(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  inclusion: Int!
  language: Int!
  learningCategory: Int!
  overall: Int!
  plagiarism: Int!
  quiz(filter: QuizFilter): Quiz
  ratings(filter: QuestionRatingFilter, orderBy: QuestionRatingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionRating!]
  resource: String
  responses(filter: QuestionResponseFilter, orderBy: QuestionResponseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionResponse!]
  text: String!
  updatedAt: DateTime!
  visibility: QuestionVisibility!

  # Meta information about the query.
  _analyticsMeta(filter: PrendusAnalyticsFilter, orderBy: PrendusAnalyticsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _answerCommentsMeta(filter: AnswerCommentFilter, orderBy: AnswerCommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _flagsMeta(filter: QuestionFlagFilter, orderBy: QuestionFlagOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _imagesMeta(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _ratingsMeta(filter: QuestionRatingFilter, orderBy: QuestionRatingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _responsesMeta(filter: QuestionResponseFilter, orderBy: QuestionResponseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input QuestionanalyticsPrendusAnalytics {
  contextId: String
  contextType: ContextType
  object: String
  verb: String!
  assignmentId: ID
  assignment: PrendusAnalyticsassignmentAssignment
  courseId: ID
  course: PrendusAnalyticscourseCourse
  userId: ID
  user: PrendusAnalyticsuserUser
}

input QuestionanswerCommentsAnswerComment {
  text: String!
}

input QuestionassignmentAssignment {
  numCreateQuestions: Int
  numGradeResponses: Int
  numResponseQuestions: Int
  numReviewQuestions: Int
  questionType: QuestionType
  title: String!
  authorId: ID
  author: AssignmentauthorUser
  courseId: ID
  course: AssignmentcourseCourse
  quizId: ID
  quiz: AssignmentquizQuiz
  analyticsIds: [ID!]
  analytics: [AssignmentanalyticsPrendusAnalytics!]
  conceptsIds: [ID!]
  concepts: [AssignmentconceptsConcept!]
  questionsIds: [ID!]
  questions: [AssignmentquestionsQuestion!]
}

input QuestionauthorUser {
  email: String
  password: String
  role: UserRole
  enrolledCoursesIds: [ID!]
  enrolledCourses: [UserenrolledCoursesCourse!]
  ltiUsersIds: [ID!]
  ltiUsers: [UserltiUsersLTIUser!]
  ownedAssignmentsIds: [ID!]
  ownedAssignments: [UserownedAssignmentsAssignment!]
  ownedCoursesIds: [ID!]
  ownedCourses: [UserownedCoursesCourse!]
  ownedQuestionResponseRatingsIds: [ID!]
  ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!]
  ownedQuestionResponsesIds: [ID!]
  ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!]
  ownedQuestionsIds: [ID!]
  ownedQuestions: [UserownedQuestionsQuestion!]
  ownedQuizzesIds: [ID!]
  ownedQuizzes: [UserownedQuizzesQuiz!]
  purchasesIds: [ID!]
  purchases: [UserpurchasesPurchase!]
  questionRatingsIds: [ID!]
  questionRatings: [UserquestionRatingsQuestionRating!]
  userAnalyticsIds: [ID!]
  userAnalytics: [UseruserAnalyticsPrendusAnalytics!]
}

input QuestionconceptConcept {
  title: String!
  subjectId: ID
  subject: ConceptsubjectSubject
  assignmentsIds: [ID!]
  assignments: [ConceptassignmentsAssignment!]
  questionsIds: [ID!]
  questions: [ConceptquestionsQuestion!]
}

input QuestionFilter {
  # Logical AND on all given filters.
  AND: [QuestionFilter!]

  # Logical OR on all given filters.
  OR: [QuestionFilter!]
  code: String

  # All values that are not equal to given value.
  code_not: String

  # All values that are contained in given list.
  code_in: [String!]

  # All values that are not contained in given list.
  code_not_in: [String!]

  # All values less than the given value.
  code_lt: String

  # All values less than or equal the given value.
  code_lte: String

  # All values greater than the given value.
  code_gt: String

  # All values greater than or equal the given value.
  code_gte: String

  # All values containing the given string.
  code_contains: String

  # All values not containing the given string.
  code_not_contains: String

  # All values starting with the given string.
  code_starts_with: String

  # All values not starting with the given string.
  code_not_starts_with: String

  # All values ending with the given string.
  code_ends_with: String

  # All values not ending with the given string.
  code_not_ends_with: String
  conceptAlignment: Int

  # All values that are not equal to given value.
  conceptAlignment_not: Int

  # All values that are contained in given list.
  conceptAlignment_in: [Int!]

  # All values that are not contained in given list.
  conceptAlignment_not_in: [Int!]

  # All values less than the given value.
  conceptAlignment_lt: Int

  # All values less than or equal the given value.
  conceptAlignment_lte: Int

  # All values greater than the given value.
  conceptAlignment_gt: Int

  # All values greater than or equal the given value.
  conceptAlignment_gte: Int
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  difficulty: Int

  # All values that are not equal to given value.
  difficulty_not: Int

  # All values that are contained in given list.
  difficulty_in: [Int!]

  # All values that are not contained in given list.
  difficulty_not_in: [Int!]

  # All values less than the given value.
  difficulty_lt: Int

  # All values less than or equal the given value.
  difficulty_lte: Int

  # All values greater than the given value.
  difficulty_gt: Int

  # All values greater than or equal the given value.
  difficulty_gte: Int
  explanation: String

  # All values that are not equal to given value.
  explanation_not: String

  # All values that are contained in given list.
  explanation_in: [String!]

  # All values that are not contained in given list.
  explanation_not_in: [String!]

  # All values less than the given value.
  explanation_lt: String

  # All values less than or equal the given value.
  explanation_lte: String

  # All values greater than the given value.
  explanation_gt: String

  # All values greater than or equal the given value.
  explanation_gte: String

  # All values containing the given string.
  explanation_contains: String

  # All values not containing the given string.
  explanation_not_contains: String

  # All values starting with the given string.
  explanation_starts_with: String

  # All values not starting with the given string.
  explanation_not_starts_with: String

  # All values ending with the given string.
  explanation_ends_with: String

  # All values not ending with the given string.
  explanation_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  inclusion: Int

  # All values that are not equal to given value.
  inclusion_not: Int

  # All values that are contained in given list.
  inclusion_in: [Int!]

  # All values that are not contained in given list.
  inclusion_not_in: [Int!]

  # All values less than the given value.
  inclusion_lt: Int

  # All values less than or equal the given value.
  inclusion_lte: Int

  # All values greater than the given value.
  inclusion_gt: Int

  # All values greater than or equal the given value.
  inclusion_gte: Int
  language: Int

  # All values that are not equal to given value.
  language_not: Int

  # All values that are contained in given list.
  language_in: [Int!]

  # All values that are not contained in given list.
  language_not_in: [Int!]

  # All values less than the given value.
  language_lt: Int

  # All values less than or equal the given value.
  language_lte: Int

  # All values greater than the given value.
  language_gt: Int

  # All values greater than or equal the given value.
  language_gte: Int
  learningCategory: Int

  # All values that are not equal to given value.
  learningCategory_not: Int

  # All values that are contained in given list.
  learningCategory_in: [Int!]

  # All values that are not contained in given list.
  learningCategory_not_in: [Int!]

  # All values less than the given value.
  learningCategory_lt: Int

  # All values less than or equal the given value.
  learningCategory_lte: Int

  # All values greater than the given value.
  learningCategory_gt: Int

  # All values greater than or equal the given value.
  learningCategory_gte: Int
  overall: Int

  # All values that are not equal to given value.
  overall_not: Int

  # All values that are contained in given list.
  overall_in: [Int!]

  # All values that are not contained in given list.
  overall_not_in: [Int!]

  # All values less than the given value.
  overall_lt: Int

  # All values less than or equal the given value.
  overall_lte: Int

  # All values greater than the given value.
  overall_gt: Int

  # All values greater than or equal the given value.
  overall_gte: Int
  plagiarism: Int

  # All values that are not equal to given value.
  plagiarism_not: Int

  # All values that are contained in given list.
  plagiarism_in: [Int!]

  # All values that are not contained in given list.
  plagiarism_not_in: [Int!]

  # All values less than the given value.
  plagiarism_lt: Int

  # All values less than or equal the given value.
  plagiarism_lte: Int

  # All values greater than the given value.
  plagiarism_gt: Int

  # All values greater than or equal the given value.
  plagiarism_gte: Int
  resource: String

  # All values that are not equal to given value.
  resource_not: String

  # All values that are contained in given list.
  resource_in: [String!]

  # All values that are not contained in given list.
  resource_not_in: [String!]

  # All values less than the given value.
  resource_lt: String

  # All values less than or equal the given value.
  resource_lte: String

  # All values greater than the given value.
  resource_gt: String

  # All values greater than or equal the given value.
  resource_gte: String

  # All values containing the given string.
  resource_contains: String

  # All values not containing the given string.
  resource_not_contains: String

  # All values starting with the given string.
  resource_starts_with: String

  # All values not starting with the given string.
  resource_not_starts_with: String

  # All values ending with the given string.
  resource_ends_with: String

  # All values not ending with the given string.
  resource_not_ends_with: String
  text: String

  # All values that are not equal to given value.
  text_not: String

  # All values that are contained in given list.
  text_in: [String!]

  # All values that are not contained in given list.
  text_not_in: [String!]

  # All values less than the given value.
  text_lt: String

  # All values less than or equal the given value.
  text_lte: String

  # All values greater than the given value.
  text_gt: String

  # All values greater than or equal the given value.
  text_gte: String

  # All values containing the given string.
  text_contains: String

  # All values not containing the given string.
  text_not_contains: String

  # All values starting with the given string.
  text_starts_with: String

  # All values not starting with the given string.
  text_not_starts_with: String

  # All values ending with the given string.
  text_ends_with: String

  # All values not ending with the given string.
  text_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  visibility: QuestionVisibility

  # All values that are not equal to given value.
  visibility_not: QuestionVisibility

  # All values that are contained in given list.
  visibility_in: [QuestionVisibility!]

  # All values that are not contained in given list.
  visibility_not_in: [QuestionVisibility!]
  analytics_every: PrendusAnalyticsFilter
  analytics_some: PrendusAnalyticsFilter
  analytics_none: PrendusAnalyticsFilter
  answerComments_every: AnswerCommentFilter
  answerComments_some: AnswerCommentFilter
  answerComments_none: AnswerCommentFilter
  assignment: AssignmentFilter
  author: UserFilter
  concept: ConceptFilter
  flags_every: QuestionFlagFilter
  flags_some: QuestionFlagFilter
  flags_none: QuestionFlagFilter
  images_every: FileFilter
  images_some: FileFilter
  images_none: FileFilter
  quiz: QuizFilter
  ratings_every: QuestionRatingFilter
  ratings_some: QuestionRatingFilter
  ratings_none: QuestionRatingFilter
  responses_every: QuestionResponseFilter
  responses_some: QuestionResponseFilter
  responses_none: QuestionResponseFilter
}

type QuestionFlag implements Node {
  comment: String!
  createdAt: DateTime!
  id: ID!
  question(filter: QuestionFilter): Question!
  updatedAt: DateTime!
}

input QuestionFlagFilter {
  # Logical AND on all given filters.
  AND: [QuestionFlagFilter!]

  # Logical OR on all given filters.
  OR: [QuestionFlagFilter!]
  comment: String

  # All values that are not equal to given value.
  comment_not: String

  # All values that are contained in given list.
  comment_in: [String!]

  # All values that are not contained in given list.
  comment_not_in: [String!]

  # All values less than the given value.
  comment_lt: String

  # All values less than or equal the given value.
  comment_lte: String

  # All values greater than the given value.
  comment_gt: String

  # All values greater than or equal the given value.
  comment_gte: String

  # All values containing the given string.
  comment_contains: String

  # All values not containing the given string.
  comment_not_contains: String

  # All values starting with the given string.
  comment_starts_with: String

  # All values not starting with the given string.
  comment_not_starts_with: String

  # All values ending with the given string.
  comment_ends_with: String

  # All values not ending with the given string.
  comment_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  question: QuestionFilter
}

enum QuestionFlagOrderBy {
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuestionFlagPreviousValues {
  comment: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input QuestionFlagquestionQuestion {
  code: String!
  conceptAlignment: Int
  difficulty: Int
  explanation: String
  inclusion: Int
  language: Int
  learningCategory: Int
  overall: Int
  plagiarism: Int
  resource: String
  text: String!
  visibility: QuestionVisibility
  assignmentId: ID
  assignment: QuestionassignmentAssignment
  authorId: ID
  author: QuestionauthorUser
  conceptId: ID
  concept: QuestionconceptConcept
  quizId: ID
  quiz: QuestionquizQuiz
  analyticsIds: [ID!]
  analytics: [QuestionanalyticsPrendusAnalytics!]
  answerCommentsIds: [ID!]
  answerComments: [QuestionanswerCommentsAnswerComment!]
  flagsIds: [ID!]
  flags: [QuestionflagsQuestionFlag!]
  imagesIds: [ID!]
  images: [QuestionimagesFile!]
  ratingsIds: [ID!]
  ratings: [QuestionratingsQuestionRating!]
  responsesIds: [ID!]
  responses: [QuestionresponsesQuestionResponse!]
}

input QuestionflagsQuestionFlag {
  comment: String!
}

input QuestionFlagSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [QuestionFlagSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [QuestionFlagSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: QuestionFlagSubscriptionFilterNode
}

input QuestionFlagSubscriptionFilterNode {
  comment: String

  # All values that are not equal to given value.
  comment_not: String

  # All values that are contained in given list.
  comment_in: [String!]

  # All values that are not contained in given list.
  comment_not_in: [String!]

  # All values less than the given value.
  comment_lt: String

  # All values less than or equal the given value.
  comment_lte: String

  # All values greater than the given value.
  comment_gt: String

  # All values greater than or equal the given value.
  comment_gte: String

  # All values containing the given string.
  comment_contains: String

  # All values not containing the given string.
  comment_not_contains: String

  # All values starting with the given string.
  comment_starts_with: String

  # All values not starting with the given string.
  comment_not_starts_with: String

  # All values ending with the given string.
  comment_ends_with: String

  # All values not ending with the given string.
  comment_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  question: QuestionFilter
}

type QuestionFlagSubscriptionPayload {
  mutation: _ModelMutationType!
  node: QuestionFlag
  updatedFields: [String!]
  previousValues: QuestionFlagPreviousValues
}

input QuestionimagesFile {
  contentType: String!
  name: String!
  secret: String!
  size: Int!
  url: String!
}

enum QuestionOrderBy {
  code_ASC
  code_DESC
  conceptAlignment_ASC
  conceptAlignment_DESC
  createdAt_ASC
  createdAt_DESC
  difficulty_ASC
  difficulty_DESC
  explanation_ASC
  explanation_DESC
  id_ASC
  id_DESC
  inclusion_ASC
  inclusion_DESC
  language_ASC
  language_DESC
  learningCategory_ASC
  learningCategory_DESC
  overall_ASC
  overall_DESC
  plagiarism_ASC
  plagiarism_DESC
  resource_ASC
  resource_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  visibility_ASC
  visibility_DESC
}

type QuestionPreviousValues {
  code: String!
  conceptAlignment: Int!
  createdAt: DateTime!
  difficulty: Int!
  explanation: String
  id: ID!
  inclusion: Int!
  language: Int!
  learningCategory: Int!
  overall: Int!
  plagiarism: Int!
  resource: String
  text: String!
  updatedAt: DateTime!
  visibility: QuestionVisibility!
}

input QuestionquizQuiz {
  title: String!
  assignmentId: ID
  assignment: QuizassignmentAssignment
  authorId: ID
  author: QuizauthorUser
  questionsIds: [ID!]
  questions: [QuizquestionsQuestion!]
}

type QuestionRating implements Node {
  createdAt: DateTime!
  id: ID!
  question(filter: QuestionFilter): Question!
  rater(filter: UserFilter): User!
  ratingJson: Json
  scores(filter: CategoryScoreFilter, orderBy: CategoryScoreOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [CategoryScore!]
  updatedAt: DateTime!

  # Meta information about the query.
  _scoresMeta(filter: CategoryScoreFilter, orderBy: CategoryScoreOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input QuestionRatingFilter {
  # Logical AND on all given filters.
  AND: [QuestionRatingFilter!]

  # Logical OR on all given filters.
  OR: [QuestionRatingFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  question: QuestionFilter
  rater: UserFilter
  scores_every: CategoryScoreFilter
  scores_some: CategoryScoreFilter
  scores_none: CategoryScoreFilter
}

enum QuestionRatingOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  ratingJson_ASC
  ratingJson_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuestionRatingPreviousValues {
  createdAt: DateTime!
  id: ID!
  ratingJson: Json
  updatedAt: DateTime!
}

input QuestionRatingquestionQuestion {
  code: String!
  conceptAlignment: Int
  difficulty: Int
  explanation: String
  inclusion: Int
  language: Int
  learningCategory: Int
  overall: Int
  plagiarism: Int
  resource: String
  text: String!
  visibility: QuestionVisibility
  assignmentId: ID
  assignment: QuestionassignmentAssignment
  authorId: ID
  author: QuestionauthorUser
  conceptId: ID
  concept: QuestionconceptConcept
  quizId: ID
  quiz: QuestionquizQuiz
  analyticsIds: [ID!]
  analytics: [QuestionanalyticsPrendusAnalytics!]
  answerCommentsIds: [ID!]
  answerComments: [QuestionanswerCommentsAnswerComment!]
  flagsIds: [ID!]
  flags: [QuestionflagsQuestionFlag!]
  imagesIds: [ID!]
  images: [QuestionimagesFile!]
  ratingsIds: [ID!]
  ratings: [QuestionratingsQuestionRating!]
  responsesIds: [ID!]
  responses: [QuestionresponsesQuestionResponse!]
}

input QuestionRatingraterUser {
  email: String
  password: String
  role: UserRole
  enrolledCoursesIds: [ID!]
  enrolledCourses: [UserenrolledCoursesCourse!]
  ltiUsersIds: [ID!]
  ltiUsers: [UserltiUsersLTIUser!]
  ownedAssignmentsIds: [ID!]
  ownedAssignments: [UserownedAssignmentsAssignment!]
  ownedCoursesIds: [ID!]
  ownedCourses: [UserownedCoursesCourse!]
  ownedQuestionResponseRatingsIds: [ID!]
  ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!]
  ownedQuestionResponsesIds: [ID!]
  ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!]
  ownedQuestionsIds: [ID!]
  ownedQuestions: [UserownedQuestionsQuestion!]
  ownedQuizzesIds: [ID!]
  ownedQuizzes: [UserownedQuizzesQuiz!]
  purchasesIds: [ID!]
  purchases: [UserpurchasesPurchase!]
  questionRatingsIds: [ID!]
  questionRatings: [UserquestionRatingsQuestionRating!]
  userAnalyticsIds: [ID!]
  userAnalytics: [UseruserAnalyticsPrendusAnalytics!]
}

input QuestionRatingscoresCategoryScore {
  category: String!
  score: Int!
  questionResponseRatingId: ID
  questionResponseRating: CategoryScorequestionResponseRatingQuestionResponseRating
}

input QuestionratingsQuestionRating {
  ratingJson: Json
  raterId: ID
  rater: QuestionRatingraterUser
  scoresIds: [ID!]
  scores: [QuestionRatingscoresCategoryScore!]
}

input QuestionRatingSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [QuestionRatingSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [QuestionRatingSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: QuestionRatingSubscriptionFilterNode
}

input QuestionRatingSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  question: QuestionFilter
  rater: UserFilter
  scores_every: CategoryScoreFilter
  scores_some: CategoryScoreFilter
  scores_none: CategoryScoreFilter
}

type QuestionRatingSubscriptionPayload {
  mutation: _ModelMutationType!
  node: QuestionRating
  updatedFields: [String!]
  previousValues: QuestionRatingPreviousValues
}

type QuestionResponse implements Node {
  author(filter: UserFilter): User!
  createdAt: DateTime!
  id: ID!
  question(filter: QuestionFilter): Question!
  ratings(filter: QuestionResponseRatingFilter, orderBy: QuestionResponseRatingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionResponseRating!]
  updatedAt: DateTime!
  userChecks(filter: UserCheckFilter, orderBy: UserCheckOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [UserCheck!]
  userEssays(filter: UserEssayFilter, orderBy: UserEssayOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [UserEssay!]
  userInputs(filter: UserInputFilter, orderBy: UserInputOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [UserInput!]
  userRadios(filter: UserRadioFilter, orderBy: UserRadioOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [UserRadio!]
  userVariables(filter: UserVariableFilter, orderBy: UserVariableOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [UserVariable!]

  # Meta information about the query.
  _ratingsMeta(filter: QuestionResponseRatingFilter, orderBy: QuestionResponseRatingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _userChecksMeta(filter: UserCheckFilter, orderBy: UserCheckOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _userEssaysMeta(filter: UserEssayFilter, orderBy: UserEssayOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _userInputsMeta(filter: UserInputFilter, orderBy: UserInputOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _userRadiosMeta(filter: UserRadioFilter, orderBy: UserRadioOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _userVariablesMeta(filter: UserVariableFilter, orderBy: UserVariableOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input QuestionResponseauthorUser {
  email: String
  password: String
  role: UserRole
  enrolledCoursesIds: [ID!]
  enrolledCourses: [UserenrolledCoursesCourse!]
  ltiUsersIds: [ID!]
  ltiUsers: [UserltiUsersLTIUser!]
  ownedAssignmentsIds: [ID!]
  ownedAssignments: [UserownedAssignmentsAssignment!]
  ownedCoursesIds: [ID!]
  ownedCourses: [UserownedCoursesCourse!]
  ownedQuestionResponseRatingsIds: [ID!]
  ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!]
  ownedQuestionResponsesIds: [ID!]
  ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!]
  ownedQuestionsIds: [ID!]
  ownedQuestions: [UserownedQuestionsQuestion!]
  ownedQuizzesIds: [ID!]
  ownedQuizzes: [UserownedQuizzesQuiz!]
  purchasesIds: [ID!]
  purchases: [UserpurchasesPurchase!]
  questionRatingsIds: [ID!]
  questionRatings: [UserquestionRatingsQuestionRating!]
  userAnalyticsIds: [ID!]
  userAnalytics: [UseruserAnalyticsPrendusAnalytics!]
}

input QuestionResponseFilter {
  # Logical AND on all given filters.
  AND: [QuestionResponseFilter!]

  # Logical OR on all given filters.
  OR: [QuestionResponseFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  author: UserFilter
  question: QuestionFilter
  ratings_every: QuestionResponseRatingFilter
  ratings_some: QuestionResponseRatingFilter
  ratings_none: QuestionResponseRatingFilter
  userChecks_every: UserCheckFilter
  userChecks_some: UserCheckFilter
  userChecks_none: UserCheckFilter
  userEssays_every: UserEssayFilter
  userEssays_some: UserEssayFilter
  userEssays_none: UserEssayFilter
  userInputs_every: UserInputFilter
  userInputs_some: UserInputFilter
  userInputs_none: UserInputFilter
  userRadios_every: UserRadioFilter
  userRadios_some: UserRadioFilter
  userRadios_none: UserRadioFilter
  userVariables_every: UserVariableFilter
  userVariables_some: UserVariableFilter
  userVariables_none: UserVariableFilter
}

enum QuestionResponseOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuestionResponsePreviousValues {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input QuestionResponsequestionQuestion {
  code: String!
  conceptAlignment: Int
  difficulty: Int
  explanation: String
  inclusion: Int
  language: Int
  learningCategory: Int
  overall: Int
  plagiarism: Int
  resource: String
  text: String!
  visibility: QuestionVisibility
  assignmentId: ID
  assignment: QuestionassignmentAssignment
  authorId: ID
  author: QuestionauthorUser
  conceptId: ID
  concept: QuestionconceptConcept
  quizId: ID
  quiz: QuestionquizQuiz
  analyticsIds: [ID!]
  analytics: [QuestionanalyticsPrendusAnalytics!]
  answerCommentsIds: [ID!]
  answerComments: [QuestionanswerCommentsAnswerComment!]
  flagsIds: [ID!]
  flags: [QuestionflagsQuestionFlag!]
  imagesIds: [ID!]
  images: [QuestionimagesFile!]
  ratingsIds: [ID!]
  ratings: [QuestionratingsQuestionRating!]
  responsesIds: [ID!]
  responses: [QuestionresponsesQuestionResponse!]
}

type QuestionResponseRating implements Node {
  createdAt: DateTime!
  id: ID!
  questionResponse(filter: QuestionResponseFilter): QuestionResponse!
  rater(filter: UserFilter): User!
  scores(filter: CategoryScoreFilter, orderBy: CategoryScoreOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [CategoryScore!]
  updatedAt: DateTime!

  # Meta information about the query.
  _scoresMeta(filter: CategoryScoreFilter, orderBy: CategoryScoreOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input QuestionResponseRatingFilter {
  # Logical AND on all given filters.
  AND: [QuestionResponseRatingFilter!]

  # Logical OR on all given filters.
  OR: [QuestionResponseRatingFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  questionResponse: QuestionResponseFilter
  rater: UserFilter
  scores_every: CategoryScoreFilter
  scores_some: CategoryScoreFilter
  scores_none: CategoryScoreFilter
}

enum QuestionResponseRatingOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuestionResponseRatingPreviousValues {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input QuestionResponseRatingquestionResponseQuestionResponse {
  authorId: ID
  author: QuestionResponseauthorUser
  questionId: ID
  question: QuestionResponsequestionQuestion
  ratingsIds: [ID!]
  ratings: [QuestionResponseratingsQuestionResponseRating!]
  userChecksIds: [ID!]
  userChecks: [QuestionResponseuserChecksUserCheck!]
  userEssaysIds: [ID!]
  userEssays: [QuestionResponseuserEssaysUserEssay!]
  userInputsIds: [ID!]
  userInputs: [QuestionResponseuserInputsUserInput!]
  userRadiosIds: [ID!]
  userRadios: [QuestionResponseuserRadiosUserRadio!]
  userVariablesIds: [ID!]
  userVariables: [QuestionResponseuserVariablesUserVariable!]
}

input QuestionResponseRatingraterUser {
  email: String
  password: String
  role: UserRole
  enrolledCoursesIds: [ID!]
  enrolledCourses: [UserenrolledCoursesCourse!]
  ltiUsersIds: [ID!]
  ltiUsers: [UserltiUsersLTIUser!]
  ownedAssignmentsIds: [ID!]
  ownedAssignments: [UserownedAssignmentsAssignment!]
  ownedCoursesIds: [ID!]
  ownedCourses: [UserownedCoursesCourse!]
  ownedQuestionResponseRatingsIds: [ID!]
  ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!]
  ownedQuestionResponsesIds: [ID!]
  ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!]
  ownedQuestionsIds: [ID!]
  ownedQuestions: [UserownedQuestionsQuestion!]
  ownedQuizzesIds: [ID!]
  ownedQuizzes: [UserownedQuizzesQuiz!]
  purchasesIds: [ID!]
  purchases: [UserpurchasesPurchase!]
  questionRatingsIds: [ID!]
  questionRatings: [UserquestionRatingsQuestionRating!]
  userAnalyticsIds: [ID!]
  userAnalytics: [UseruserAnalyticsPrendusAnalytics!]
}

input QuestionResponseRatingscoresCategoryScore {
  category: String!
  score: Int!
  questionRatingId: ID
  questionRating: CategoryScorequestionRatingQuestionRating
}

input QuestionResponseratingsQuestionResponseRating {
  raterId: ID
  rater: QuestionResponseRatingraterUser
  scoresIds: [ID!]
  scores: [QuestionResponseRatingscoresCategoryScore!]
}

input QuestionResponseRatingSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [QuestionResponseRatingSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [QuestionResponseRatingSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: QuestionResponseRatingSubscriptionFilterNode
}

input QuestionResponseRatingSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  questionResponse: QuestionResponseFilter
  rater: UserFilter
  scores_every: CategoryScoreFilter
  scores_some: CategoryScoreFilter
  scores_none: CategoryScoreFilter
}

type QuestionResponseRatingSubscriptionPayload {
  mutation: _ModelMutationType!
  node: QuestionResponseRating
  updatedFields: [String!]
  previousValues: QuestionResponseRatingPreviousValues
}

input QuestionresponsesQuestionResponse {
  authorId: ID
  author: QuestionResponseauthorUser
  ratingsIds: [ID!]
  ratings: [QuestionResponseratingsQuestionResponseRating!]
  userChecksIds: [ID!]
  userChecks: [QuestionResponseuserChecksUserCheck!]
  userEssaysIds: [ID!]
  userEssays: [QuestionResponseuserEssaysUserEssay!]
  userInputsIds: [ID!]
  userInputs: [QuestionResponseuserInputsUserInput!]
  userRadiosIds: [ID!]
  userRadios: [QuestionResponseuserRadiosUserRadio!]
  userVariablesIds: [ID!]
  userVariables: [QuestionResponseuserVariablesUserVariable!]
}

input QuestionResponseSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [QuestionResponseSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [QuestionResponseSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: QuestionResponseSubscriptionFilterNode
}

input QuestionResponseSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  author: UserFilter
  question: QuestionFilter
  ratings_every: QuestionResponseRatingFilter
  ratings_some: QuestionResponseRatingFilter
  ratings_none: QuestionResponseRatingFilter
  userChecks_every: UserCheckFilter
  userChecks_some: UserCheckFilter
  userChecks_none: UserCheckFilter
  userEssays_every: UserEssayFilter
  userEssays_some: UserEssayFilter
  userEssays_none: UserEssayFilter
  userInputs_every: UserInputFilter
  userInputs_some: UserInputFilter
  userInputs_none: UserInputFilter
  userRadios_every: UserRadioFilter
  userRadios_some: UserRadioFilter
  userRadios_none: UserRadioFilter
  userVariables_every: UserVariableFilter
  userVariables_some: UserVariableFilter
  userVariables_none: UserVariableFilter
}

type QuestionResponseSubscriptionPayload {
  mutation: _ModelMutationType!
  node: QuestionResponse
  updatedFields: [String!]
  previousValues: QuestionResponsePreviousValues
}

input QuestionResponseuserChecksUserCheck {
  checked: Boolean!
  varName: String!
}

input QuestionResponseuserEssaysUserEssay {
  value: String!
  varName: String!
}

input QuestionResponseuserInputsUserInput {
  value: String!
  varName: String!
}

input QuestionResponseuserRadiosUserRadio {
  checked: Boolean!
  varName: String!
}

input QuestionResponseuserVariablesUserVariable {
  value: Float!
  varName: String!
}

input QuestionSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [QuestionSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [QuestionSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: QuestionSubscriptionFilterNode
}

input QuestionSubscriptionFilterNode {
  code: String

  # All values that are not equal to given value.
  code_not: String

  # All values that are contained in given list.
  code_in: [String!]

  # All values that are not contained in given list.
  code_not_in: [String!]

  # All values less than the given value.
  code_lt: String

  # All values less than or equal the given value.
  code_lte: String

  # All values greater than the given value.
  code_gt: String

  # All values greater than or equal the given value.
  code_gte: String

  # All values containing the given string.
  code_contains: String

  # All values not containing the given string.
  code_not_contains: String

  # All values starting with the given string.
  code_starts_with: String

  # All values not starting with the given string.
  code_not_starts_with: String

  # All values ending with the given string.
  code_ends_with: String

  # All values not ending with the given string.
  code_not_ends_with: String
  conceptAlignment: Int

  # All values that are not equal to given value.
  conceptAlignment_not: Int

  # All values that are contained in given list.
  conceptAlignment_in: [Int!]

  # All values that are not contained in given list.
  conceptAlignment_not_in: [Int!]

  # All values less than the given value.
  conceptAlignment_lt: Int

  # All values less than or equal the given value.
  conceptAlignment_lte: Int

  # All values greater than the given value.
  conceptAlignment_gt: Int

  # All values greater than or equal the given value.
  conceptAlignment_gte: Int
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  difficulty: Int

  # All values that are not equal to given value.
  difficulty_not: Int

  # All values that are contained in given list.
  difficulty_in: [Int!]

  # All values that are not contained in given list.
  difficulty_not_in: [Int!]

  # All values less than the given value.
  difficulty_lt: Int

  # All values less than or equal the given value.
  difficulty_lte: Int

  # All values greater than the given value.
  difficulty_gt: Int

  # All values greater than or equal the given value.
  difficulty_gte: Int
  explanation: String

  # All values that are not equal to given value.
  explanation_not: String

  # All values that are contained in given list.
  explanation_in: [String!]

  # All values that are not contained in given list.
  explanation_not_in: [String!]

  # All values less than the given value.
  explanation_lt: String

  # All values less than or equal the given value.
  explanation_lte: String

  # All values greater than the given value.
  explanation_gt: String

  # All values greater than or equal the given value.
  explanation_gte: String

  # All values containing the given string.
  explanation_contains: String

  # All values not containing the given string.
  explanation_not_contains: String

  # All values starting with the given string.
  explanation_starts_with: String

  # All values not starting with the given string.
  explanation_not_starts_with: String

  # All values ending with the given string.
  explanation_ends_with: String

  # All values not ending with the given string.
  explanation_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  inclusion: Int

  # All values that are not equal to given value.
  inclusion_not: Int

  # All values that are contained in given list.
  inclusion_in: [Int!]

  # All values that are not contained in given list.
  inclusion_not_in: [Int!]

  # All values less than the given value.
  inclusion_lt: Int

  # All values less than or equal the given value.
  inclusion_lte: Int

  # All values greater than the given value.
  inclusion_gt: Int

  # All values greater than or equal the given value.
  inclusion_gte: Int
  language: Int

  # All values that are not equal to given value.
  language_not: Int

  # All values that are contained in given list.
  language_in: [Int!]

  # All values that are not contained in given list.
  language_not_in: [Int!]

  # All values less than the given value.
  language_lt: Int

  # All values less than or equal the given value.
  language_lte: Int

  # All values greater than the given value.
  language_gt: Int

  # All values greater than or equal the given value.
  language_gte: Int
  learningCategory: Int

  # All values that are not equal to given value.
  learningCategory_not: Int

  # All values that are contained in given list.
  learningCategory_in: [Int!]

  # All values that are not contained in given list.
  learningCategory_not_in: [Int!]

  # All values less than the given value.
  learningCategory_lt: Int

  # All values less than or equal the given value.
  learningCategory_lte: Int

  # All values greater than the given value.
  learningCategory_gt: Int

  # All values greater than or equal the given value.
  learningCategory_gte: Int
  overall: Int

  # All values that are not equal to given value.
  overall_not: Int

  # All values that are contained in given list.
  overall_in: [Int!]

  # All values that are not contained in given list.
  overall_not_in: [Int!]

  # All values less than the given value.
  overall_lt: Int

  # All values less than or equal the given value.
  overall_lte: Int

  # All values greater than the given value.
  overall_gt: Int

  # All values greater than or equal the given value.
  overall_gte: Int
  plagiarism: Int

  # All values that are not equal to given value.
  plagiarism_not: Int

  # All values that are contained in given list.
  plagiarism_in: [Int!]

  # All values that are not contained in given list.
  plagiarism_not_in: [Int!]

  # All values less than the given value.
  plagiarism_lt: Int

  # All values less than or equal the given value.
  plagiarism_lte: Int

  # All values greater than the given value.
  plagiarism_gt: Int

  # All values greater than or equal the given value.
  plagiarism_gte: Int
  resource: String

  # All values that are not equal to given value.
  resource_not: String

  # All values that are contained in given list.
  resource_in: [String!]

  # All values that are not contained in given list.
  resource_not_in: [String!]

  # All values less than the given value.
  resource_lt: String

  # All values less than or equal the given value.
  resource_lte: String

  # All values greater than the given value.
  resource_gt: String

  # All values greater than or equal the given value.
  resource_gte: String

  # All values containing the given string.
  resource_contains: String

  # All values not containing the given string.
  resource_not_contains: String

  # All values starting with the given string.
  resource_starts_with: String

  # All values not starting with the given string.
  resource_not_starts_with: String

  # All values ending with the given string.
  resource_ends_with: String

  # All values not ending with the given string.
  resource_not_ends_with: String
  text: String

  # All values that are not equal to given value.
  text_not: String

  # All values that are contained in given list.
  text_in: [String!]

  # All values that are not contained in given list.
  text_not_in: [String!]

  # All values less than the given value.
  text_lt: String

  # All values less than or equal the given value.
  text_lte: String

  # All values greater than the given value.
  text_gt: String

  # All values greater than or equal the given value.
  text_gte: String

  # All values containing the given string.
  text_contains: String

  # All values not containing the given string.
  text_not_contains: String

  # All values starting with the given string.
  text_starts_with: String

  # All values not starting with the given string.
  text_not_starts_with: String

  # All values ending with the given string.
  text_ends_with: String

  # All values not ending with the given string.
  text_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  visibility: QuestionVisibility

  # All values that are not equal to given value.
  visibility_not: QuestionVisibility

  # All values that are contained in given list.
  visibility_in: [QuestionVisibility!]

  # All values that are not contained in given list.
  visibility_not_in: [QuestionVisibility!]
  analytics_every: PrendusAnalyticsFilter
  analytics_some: PrendusAnalyticsFilter
  analytics_none: PrendusAnalyticsFilter
  answerComments_every: AnswerCommentFilter
  answerComments_some: AnswerCommentFilter
  answerComments_none: AnswerCommentFilter
  assignment: AssignmentFilter
  author: UserFilter
  concept: ConceptFilter
  flags_every: QuestionFlagFilter
  flags_some: QuestionFlagFilter
  flags_none: QuestionFlagFilter
  images_every: FileFilter
  images_some: FileFilter
  images_none: FileFilter
  quiz: QuizFilter
  ratings_every: QuestionRatingFilter
  ratings_some: QuestionRatingFilter
  ratings_none: QuestionRatingFilter
  responses_every: QuestionResponseFilter
  responses_some: QuestionResponseFilter
  responses_none: QuestionResponseFilter
}

type QuestionSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

enum QuestionType {
  MULTIPLE_CHOICE
  ESSAY
}

enum QuestionVisibility {
  COURSE
  PUBLIC
}

type Quiz implements Node {
  assignment(filter: AssignmentFilter): Assignment
  author(filter: UserFilter): User!
  createdAt: DateTime!
  id: ID!
  questions(filter: QuestionFilter, orderBy: QuestionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  title: String!
  updatedAt: DateTime!

  # Meta information about the query.
  _questionsMeta(filter: QuestionFilter, orderBy: QuestionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input QuizassignmentAssignment {
  numCreateQuestions: Int
  numGradeResponses: Int
  numResponseQuestions: Int
  numReviewQuestions: Int
  questionType: QuestionType
  title: String!
  authorId: ID
  author: AssignmentauthorUser
  courseId: ID
  course: AssignmentcourseCourse
  analyticsIds: [ID!]
  analytics: [AssignmentanalyticsPrendusAnalytics!]
  conceptsIds: [ID!]
  concepts: [AssignmentconceptsConcept!]
  questionsIds: [ID!]
  questions: [AssignmentquestionsQuestion!]
}

input QuizauthorUser {
  email: String
  password: String
  role: UserRole
  enrolledCoursesIds: [ID!]
  enrolledCourses: [UserenrolledCoursesCourse!]
  ltiUsersIds: [ID!]
  ltiUsers: [UserltiUsersLTIUser!]
  ownedAssignmentsIds: [ID!]
  ownedAssignments: [UserownedAssignmentsAssignment!]
  ownedCoursesIds: [ID!]
  ownedCourses: [UserownedCoursesCourse!]
  ownedQuestionResponseRatingsIds: [ID!]
  ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!]
  ownedQuestionResponsesIds: [ID!]
  ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!]
  ownedQuestionsIds: [ID!]
  ownedQuestions: [UserownedQuestionsQuestion!]
  ownedQuizzesIds: [ID!]
  ownedQuizzes: [UserownedQuizzesQuiz!]
  purchasesIds: [ID!]
  purchases: [UserpurchasesPurchase!]
  questionRatingsIds: [ID!]
  questionRatings: [UserquestionRatingsQuestionRating!]
  userAnalyticsIds: [ID!]
  userAnalytics: [UseruserAnalyticsPrendusAnalytics!]
}

input QuizFilter {
  # Logical AND on all given filters.
  AND: [QuizFilter!]

  # Logical OR on all given filters.
  OR: [QuizFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  assignment: AssignmentFilter
  author: UserFilter
  questions_every: QuestionFilter
  questions_some: QuestionFilter
  questions_none: QuestionFilter
}

enum QuizOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuizPreviousValues {
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

input QuizquestionsQuestion {
  code: String!
  conceptAlignment: Int
  difficulty: Int
  explanation: String
  inclusion: Int
  language: Int
  learningCategory: Int
  overall: Int
  plagiarism: Int
  resource: String
  text: String!
  visibility: QuestionVisibility
  assignmentId: ID
  assignment: QuestionassignmentAssignment
  authorId: ID
  author: QuestionauthorUser
  conceptId: ID
  concept: QuestionconceptConcept
  analyticsIds: [ID!]
  analytics: [QuestionanalyticsPrendusAnalytics!]
  answerCommentsIds: [ID!]
  answerComments: [QuestionanswerCommentsAnswerComment!]
  flagsIds: [ID!]
  flags: [QuestionflagsQuestionFlag!]
  imagesIds: [ID!]
  images: [QuestionimagesFile!]
  ratingsIds: [ID!]
  ratings: [QuestionratingsQuestionRating!]
  responsesIds: [ID!]
  responses: [QuestionresponsesQuestionResponse!]
}

input QuizSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [QuizSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [QuizSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: QuizSubscriptionFilterNode
}

input QuizSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  assignment: AssignmentFilter
  author: UserFilter
  questions_every: QuestionFilter
  questions_some: QuestionFilter
  questions_none: QuestionFilter
}

type QuizSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Quiz
  updatedFields: [String!]
  previousValues: QuizPreviousValues
}

type RemoveFromAssignmentOnConceptsPayload {
  assignmentsAssignment: Assignment
  conceptsConcept: Concept
}

type RemoveFromAssignmentOnPrendusAnalyticsPayload {
  assignmentAssignment: Assignment
  analyticsPrendusAnalytics: PrendusAnalytics
}

type RemoveFromAssignmentQuestionsPayload {
  assignmentAssignment: Assignment
  questionsQuestion: Question
}

type RemoveFromConceptOnQuestionPayload {
  questionsQuestion: Question
  conceptConcept: Concept
}

type RemoveFromCourseDisciplinePayload {
  coursesCourse: Course
  disciplineDiscipline: Discipline
}

type RemoveFromCourseOnAssignmentPayload {
  courseCourse: Course
  assignmentsAssignment: Assignment
}

type RemoveFromCourseOnPrendusAnalyticsPayload {
  courseCourse: Course
  analyticsPrendusAnalytics: PrendusAnalytics
}

type RemoveFromCoursePurchasedPayload {
  courseCourse: Course
  purchasesPurchase: Purchase
}

type RemoveFromCourseSubjectPayload {
  coursesCourse: Course
  subjectSubject: Subject
}

type RemoveFromImagesOnQuestionsPayload {
  imagesFile: File
  questionQuestion: Question
}

type RemoveFromQuestionOnPrendusAnalyticsPayload {
  questionQuestion: Question
  analyticsPrendusAnalytics: PrendusAnalytics
}

type RemoveFromQuizOnQuestionPayload {
  quizQuiz: Quiz
  questionsQuestion: Question
}

type RemoveFromScoresOnQuestionRatingPayload {
  questionRatingQuestionRating: QuestionRating
  scoresCategoryScore: CategoryScore
}

type RemoveFromScoresOnQuestionResponseRatingPayload {
  questionResponseRatingQuestionResponseRating: QuestionResponseRating
  scoresCategoryScore: CategoryScore
}

type RemoveFromStudentsAndCoursesPayload {
  enrolledStudentsUser: User
  enrolledCoursesCourse: Course
}

type RemoveFromUserOnPrendusAnalyticsPayload {
  userUser: User
  userAnalyticsPrendusAnalytics: PrendusAnalytics
}

# RequestPasswordResetPayload
type RequestPasswordResetPayload {
  email: String!
}

# ResetPasswordPayload
type ResetPasswordPayload {
  id: ID!
}

type SetAssignmentOnQuizPayload {
  assignmentAssignment: Assignment
  quizQuiz: Quiz
}

# SignupUserPayload
type SignupUserPayload {
  id: ID!
  token: String!
}

type Subject implements Node {
  approved: PrendusApproved!
  concepts(filter: ConceptFilter, orderBy: ConceptOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  courses(filter: CourseFilter, orderBy: CourseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  createdAt: DateTime!
  discipline(filter: DisciplineFilter): Discipline!
  id: ID!
  title: String!
  updatedAt: DateTime!

  # Meta information about the query.
  _conceptsMeta(filter: ConceptFilter, orderBy: ConceptOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _coursesMeta(filter: CourseFilter, orderBy: CourseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input SubjectconceptsConcept {
  title: String!
  assignmentsIds: [ID!]
  assignments: [ConceptassignmentsAssignment!]
  questionsIds: [ID!]
  questions: [ConceptquestionsQuestion!]
}

input SubjectcoursesCourse {
  description: String
  dueDate: DateTime
  price: Int
  title: String!
  authorId: ID
  author: CourseauthorUser
  disciplineId: ID
  discipline: CoursedisciplineDiscipline
  analyticsIds: [ID!]
  analytics: [CourseanalyticsPrendusAnalytics!]
  assignmentsIds: [ID!]
  assignments: [CourseassignmentsAssignment!]
  enrolledStudentsIds: [ID!]
  enrolledStudents: [CourseenrolledStudentsUser!]
  purchasesIds: [ID!]
  purchases: [CoursepurchasesPurchase!]
}

input SubjectdisciplineDiscipline {
  approved: PrendusApproved
  title: String!
  coursesIds: [ID!]
  courses: [DisciplinecoursesCourse!]
  subjectsIds: [ID!]
  subjects: [DisciplinesubjectsSubject!]
}

input SubjectFilter {
  # Logical AND on all given filters.
  AND: [SubjectFilter!]

  # Logical OR on all given filters.
  OR: [SubjectFilter!]
  approved: PrendusApproved

  # All values that are not equal to given value.
  approved_not: PrendusApproved

  # All values that are contained in given list.
  approved_in: [PrendusApproved!]

  # All values that are not contained in given list.
  approved_not_in: [PrendusApproved!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  concepts_every: ConceptFilter
  concepts_some: ConceptFilter
  concepts_none: ConceptFilter
  courses_every: CourseFilter
  courses_some: CourseFilter
  courses_none: CourseFilter
  discipline: DisciplineFilter
}

enum SubjectOrderBy {
  approved_ASC
  approved_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SubjectPreviousValues {
  approved: PrendusApproved!
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

input SubjectSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [SubjectSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [SubjectSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: SubjectSubscriptionFilterNode
}

input SubjectSubscriptionFilterNode {
  approved: PrendusApproved

  # All values that are not equal to given value.
  approved_not: PrendusApproved

  # All values that are contained in given list.
  approved_in: [PrendusApproved!]

  # All values that are not contained in given list.
  approved_not_in: [PrendusApproved!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  concepts_every: ConceptFilter
  concepts_some: ConceptFilter
  concepts_none: ConceptFilter
  courses_every: CourseFilter
  courses_some: CourseFilter
  courses_none: CourseFilter
  discipline: DisciplineFilter
}

type SubjectSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Subject
  updatedFields: [String!]
  previousValues: SubjectPreviousValues
}

type Subscription {
  AnswerComment(filter: AnswerCommentSubscriptionFilter): AnswerCommentSubscriptionPayload
  Assignment(filter: AssignmentSubscriptionFilter): AssignmentSubscriptionPayload
  CategoryScore(filter: CategoryScoreSubscriptionFilter): CategoryScoreSubscriptionPayload
  Concept(filter: ConceptSubscriptionFilter): ConceptSubscriptionPayload
  Course(filter: CourseSubscriptionFilter): CourseSubscriptionPayload
  Discipline(filter: DisciplineSubscriptionFilter): DisciplineSubscriptionPayload
  File(filter: FileSubscriptionFilter): FileSubscriptionPayload
  LTISession(filter: LTISessionSubscriptionFilter): LTISessionSubscriptionPayload
  LTIUser(filter: LTIUserSubscriptionFilter): LTIUserSubscriptionPayload
  PrendusAnalytics(filter: PrendusAnalyticsSubscriptionFilter): PrendusAnalyticsSubscriptionPayload
  Purchase(filter: PurchaseSubscriptionFilter): PurchaseSubscriptionPayload
  Question(filter: QuestionSubscriptionFilter): QuestionSubscriptionPayload
  QuestionFlag(filter: QuestionFlagSubscriptionFilter): QuestionFlagSubscriptionPayload
  QuestionRating(filter: QuestionRatingSubscriptionFilter): QuestionRatingSubscriptionPayload
  QuestionResponse(filter: QuestionResponseSubscriptionFilter): QuestionResponseSubscriptionPayload
  QuestionResponseRating(filter: QuestionResponseRatingSubscriptionFilter): QuestionResponseRatingSubscriptionPayload
  Quiz(filter: QuizSubscriptionFilter): QuizSubscriptionPayload
  Subject(filter: SubjectSubscriptionFilter): SubjectSubscriptionPayload
  User(filter: UserSubscriptionFilter): UserSubscriptionPayload
  UserCheck(filter: UserCheckSubscriptionFilter): UserCheckSubscriptionPayload
  UserEssay(filter: UserEssaySubscriptionFilter): UserEssaySubscriptionPayload
  UserInput(filter: UserInputSubscriptionFilter): UserInputSubscriptionPayload
  UserRadio(filter: UserRadioSubscriptionFilter): UserRadioSubscriptionPayload
  UserVariable(filter: UserVariableSubscriptionFilter): UserVariableSubscriptionPayload
}

type UnsetAssignmentOnQuizPayload {
  assignmentAssignment: Assignment
  quizQuiz: Quiz
}

input UpdateAnswerComment {
  id: ID!
  text: String
  questionId: ID
  question: AnswerCommentquestionQuestion
}

input UpdateAssignment {
  id: ID!
  numCreateQuestions: Int
  numGradeResponses: Int
  numResponseQuestions: Int
  numReviewQuestions: Int
  questionType: QuestionType
  title: String
  authorId: ID
  author: AssignmentauthorUser
  courseId: ID
  course: AssignmentcourseCourse
  quizId: ID
  quiz: AssignmentquizQuiz
  analyticsIds: [ID!]
  analytics: [AssignmentanalyticsPrendusAnalytics!]
  conceptsIds: [ID!]
  concepts: [AssignmentconceptsConcept!]
  questionsIds: [ID!]
  questions: [AssignmentquestionsQuestion!]
}

input UpdateCategoryScore {
  category: String
  id: ID!
  score: Int
  questionRatingId: ID
  questionRating: CategoryScorequestionRatingQuestionRating
  questionResponseRatingId: ID
  questionResponseRating: CategoryScorequestionResponseRatingQuestionResponseRating
}

input UpdateConcept {
  id: ID!
  title: String
  subjectId: ID
  subject: ConceptsubjectSubject
  assignmentsIds: [ID!]
  assignments: [ConceptassignmentsAssignment!]
  questionsIds: [ID!]
  questions: [ConceptquestionsQuestion!]
}

input UpdateCourse {
  description: String
  dueDate: DateTime
  id: ID!
  price: Int
  title: String
  authorId: ID
  author: CourseauthorUser
  disciplineId: ID
  discipline: CoursedisciplineDiscipline
  subjectId: ID
  subject: CoursesubjectSubject
  analyticsIds: [ID!]
  analytics: [CourseanalyticsPrendusAnalytics!]
  assignmentsIds: [ID!]
  assignments: [CourseassignmentsAssignment!]
  enrolledStudentsIds: [ID!]
  enrolledStudents: [CourseenrolledStudentsUser!]
  purchasesIds: [ID!]
  purchases: [CoursepurchasesPurchase!]
}

input UpdateDiscipline {
  approved: PrendusApproved
  id: ID!
  title: String
  coursesIds: [ID!]
  courses: [DisciplinecoursesCourse!]
  subjectsIds: [ID!]
  subjects: [DisciplinesubjectsSubject!]
}

input UpdateFile {
  contentType: String
  id: ID!
  name: String
  secret: String
  size: Int
  url: String
  questionId: ID
  question: FilequestionQuestion
}

input UpdateLTISession {
  id: ID!
  ltiUserId: String
  serializedOutcomeService: Json
}

input UpdateLTIUser {
  id: ID!
  lisPersonContactEmailPrimary: String
  ltiUserId: String
  userId: ID
  user: LTIUseruserUser
}

input UpdatePrendusAnalytics {
  contextId: String
  contextType: ContextType
  id: ID!
  object: String
  verb: String
  assignmentId: ID
  assignment: PrendusAnalyticsassignmentAssignment
  courseId: ID
  course: PrendusAnalyticscourseCourse
  questionId: ID
  question: PrendusAnalyticsquestionQuestion
  userId: ID
  user: PrendusAnalyticsuserUser
}

input UpdatePurchase {
  amount: Int
  id: ID!
  stripeTokenId: String
  courseId: ID
  course: PurchasecourseCourse
  userId: ID
  user: PurchaseuserUser
}

input UpdateQuestion {
  code: String
  conceptAlignment: Int
  difficulty: Int
  explanation: String
  id: ID!
  inclusion: Int
  language: Int
  learningCategory: Int
  overall: Int
  plagiarism: Int
  resource: String
  text: String
  visibility: QuestionVisibility
  assignmentId: ID
  assignment: QuestionassignmentAssignment
  authorId: ID
  author: QuestionauthorUser
  conceptId: ID
  concept: QuestionconceptConcept
  quizId: ID
  quiz: QuestionquizQuiz
  analyticsIds: [ID!]
  analytics: [QuestionanalyticsPrendusAnalytics!]
  answerCommentsIds: [ID!]
  answerComments: [QuestionanswerCommentsAnswerComment!]
  flagsIds: [ID!]
  flags: [QuestionflagsQuestionFlag!]
  imagesIds: [ID!]
  images: [QuestionimagesFile!]
  ratingsIds: [ID!]
  ratings: [QuestionratingsQuestionRating!]
  responsesIds: [ID!]
  responses: [QuestionresponsesQuestionResponse!]
}

input UpdateQuestionFlag {
  comment: String
  id: ID!
  questionId: ID
  question: QuestionFlagquestionQuestion
}

input UpdateQuestionRating {
  id: ID!
  ratingJson: Json
  questionId: ID
  question: QuestionRatingquestionQuestion
  raterId: ID
  rater: QuestionRatingraterUser
  scoresIds: [ID!]
  scores: [QuestionRatingscoresCategoryScore!]
}

input UpdateQuestionResponse {
  id: ID!
  authorId: ID
  author: QuestionResponseauthorUser
  questionId: ID
  question: QuestionResponsequestionQuestion
  ratingsIds: [ID!]
  ratings: [QuestionResponseratingsQuestionResponseRating!]
  userChecksIds: [ID!]
  userChecks: [QuestionResponseuserChecksUserCheck!]
  userEssaysIds: [ID!]
  userEssays: [QuestionResponseuserEssaysUserEssay!]
  userInputsIds: [ID!]
  userInputs: [QuestionResponseuserInputsUserInput!]
  userRadiosIds: [ID!]
  userRadios: [QuestionResponseuserRadiosUserRadio!]
  userVariablesIds: [ID!]
  userVariables: [QuestionResponseuserVariablesUserVariable!]
}

input UpdateQuestionResponseRating {
  id: ID!
  questionResponseId: ID
  questionResponse: QuestionResponseRatingquestionResponseQuestionResponse
  raterId: ID
  rater: QuestionResponseRatingraterUser
  scoresIds: [ID!]
  scores: [QuestionResponseRatingscoresCategoryScore!]
}

input UpdateQuiz {
  id: ID!
  title: String
  assignmentId: ID
  assignment: QuizassignmentAssignment
  authorId: ID
  author: QuizauthorUser
  questionsIds: [ID!]
  questions: [QuizquestionsQuestion!]
}

input UpdateSubject {
  approved: PrendusApproved
  id: ID!
  title: String
  disciplineId: ID
  discipline: SubjectdisciplineDiscipline
  conceptsIds: [ID!]
  concepts: [SubjectconceptsConcept!]
  coursesIds: [ID!]
  courses: [SubjectcoursesCourse!]
}

input UpdateUser {
  email: String
  id: ID!
  password: String
  role: UserRole
  enrolledCoursesIds: [ID!]
  enrolledCourses: [UserenrolledCoursesCourse!]
  ltiUsersIds: [ID!]
  ltiUsers: [UserltiUsersLTIUser!]
  ownedAssignmentsIds: [ID!]
  ownedAssignments: [UserownedAssignmentsAssignment!]
  ownedCoursesIds: [ID!]
  ownedCourses: [UserownedCoursesCourse!]
  ownedQuestionResponseRatingsIds: [ID!]
  ownedQuestionResponseRatings: [UserownedQuestionResponseRatingsQuestionResponseRating!]
  ownedQuestionResponsesIds: [ID!]
  ownedQuestionResponses: [UserownedQuestionResponsesQuestionResponse!]
  ownedQuestionsIds: [ID!]
  ownedQuestions: [UserownedQuestionsQuestion!]
  ownedQuizzesIds: [ID!]
  ownedQuizzes: [UserownedQuizzesQuiz!]
  purchasesIds: [ID!]
  purchases: [UserpurchasesPurchase!]
  questionRatingsIds: [ID!]
  questionRatings: [UserquestionRatingsQuestionRating!]
  userAnalyticsIds: [ID!]
  userAnalytics: [UseruserAnalyticsPrendusAnalytics!]
}

input UpdateUserCheck {
  checked: Boolean
  id: ID!
  varName: String
  questionResponseId: ID
  questionResponse: UserCheckquestionResponseQuestionResponse
}

input UpdateUserEssay {
  id: ID!
  value: String
  varName: String
  questionResponseId: ID
  questionResponse: UserEssayquestionResponseQuestionResponse
}

input UpdateUserInput {
  id: ID!
  value: String
  varName: String
  questionResponseId: ID
  questionResponse: UserInputquestionResponseQuestionResponse
}

input UpdateUserRadio {
  checked: Boolean
  id: ID!
  varName: String
  questionResponseId: ID
  questionResponse: UserRadioquestionResponseQuestionResponse
}

input UpdateUserVariable {
  id: ID!
  value: Float
  varName: String
  questionResponseId: ID
  questionResponse: UserVariablequestionResponseQuestionResponse
}

type User implements Node {
  createdAt: DateTime!
  email: String
  enrolledCourses(filter: CourseFilter, orderBy: CourseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  id: ID!
  ltiUsers(filter: LTIUserFilter, orderBy: LTIUserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [LTIUser!]
  ownedAssignments(filter: AssignmentFilter, orderBy: AssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Assignment!]
  ownedCourses(filter: CourseFilter, orderBy: CourseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  ownedQuestionResponseRatings(filter: QuestionResponseRatingFilter, orderBy: QuestionResponseRatingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionResponseRating!]
  ownedQuestionResponses(filter: QuestionResponseFilter, orderBy: QuestionResponseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionResponse!]
  ownedQuestions(filter: QuestionFilter, orderBy: QuestionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  ownedQuizzes(filter: QuizFilter, orderBy: QuizOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
  password: String
  purchases(filter: PurchaseFilter, orderBy: PurchaseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Purchase!]
  questionRatings(filter: QuestionRatingFilter, orderBy: QuestionRatingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionRating!]
  role: UserRole!
  updatedAt: DateTime!
  userAnalytics(filter: PrendusAnalyticsFilter, orderBy: PrendusAnalyticsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [PrendusAnalytics!]

  # Meta information about the query.
  _enrolledCoursesMeta(filter: CourseFilter, orderBy: CourseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _ltiUsersMeta(filter: LTIUserFilter, orderBy: LTIUserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _ownedAssignmentsMeta(filter: AssignmentFilter, orderBy: AssignmentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _ownedCoursesMeta(filter: CourseFilter, orderBy: CourseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _ownedQuestionResponseRatingsMeta(filter: QuestionResponseRatingFilter, orderBy: QuestionResponseRatingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _ownedQuestionResponsesMeta(filter: QuestionResponseFilter, orderBy: QuestionResponseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _ownedQuestionsMeta(filter: QuestionFilter, orderBy: QuestionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _ownedQuizzesMeta(filter: QuizFilter, orderBy: QuizOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _purchasesMeta(filter: PurchaseFilter, orderBy: PurchaseOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _questionRatingsMeta(filter: QuestionRatingFilter, orderBy: QuestionRatingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _userAnalyticsMeta(filter: PrendusAnalyticsFilter, orderBy: PrendusAnalyticsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

type UserCheck implements Node {
  checked: Boolean!
  createdAt: DateTime!
  id: ID!
  questionResponse(filter: QuestionResponseFilter): QuestionResponse!
  updatedAt: DateTime!
  varName: String!
}

input UserCheckFilter {
  # Logical AND on all given filters.
  AND: [UserCheckFilter!]

  # Logical OR on all given filters.
  OR: [UserCheckFilter!]
  checked: Boolean

  # All values that are not equal to given value.
  checked_not: Boolean
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  varName: String

  # All values that are not equal to given value.
  varName_not: String

  # All values that are contained in given list.
  varName_in: [String!]

  # All values that are not contained in given list.
  varName_not_in: [String!]

  # All values less than the given value.
  varName_lt: String

  # All values less than or equal the given value.
  varName_lte: String

  # All values greater than the given value.
  varName_gt: String

  # All values greater than or equal the given value.
  varName_gte: String

  # All values containing the given string.
  varName_contains: String

  # All values not containing the given string.
  varName_not_contains: String

  # All values starting with the given string.
  varName_starts_with: String

  # All values not starting with the given string.
  varName_not_starts_with: String

  # All values ending with the given string.
  varName_ends_with: String

  # All values not ending with the given string.
  varName_not_ends_with: String
  questionResponse: QuestionResponseFilter
}

enum UserCheckOrderBy {
  checked_ASC
  checked_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  varName_ASC
  varName_DESC
}

type UserCheckPreviousValues {
  checked: Boolean!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  varName: String!
}

input UserCheckquestionResponseQuestionResponse {
  authorId: ID
  author: QuestionResponseauthorUser
  questionId: ID
  question: QuestionResponsequestionQuestion
  ratingsIds: [ID!]
  ratings: [QuestionResponseratingsQuestionResponseRating!]
  userChecksIds: [ID!]
  userChecks: [QuestionResponseuserChecksUserCheck!]
  userEssaysIds: [ID!]
  userEssays: [QuestionResponseuserEssaysUserEssay!]
  userInputsIds: [ID!]
  userInputs: [QuestionResponseuserInputsUserInput!]
  userRadiosIds: [ID!]
  userRadios: [QuestionResponseuserRadiosUserRadio!]
  userVariablesIds: [ID!]
  userVariables: [QuestionResponseuserVariablesUserVariable!]
}

input UserCheckSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [UserCheckSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [UserCheckSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: UserCheckSubscriptionFilterNode
}

input UserCheckSubscriptionFilterNode {
  checked: Boolean

  # All values that are not equal to given value.
  checked_not: Boolean
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  varName: String

  # All values that are not equal to given value.
  varName_not: String

  # All values that are contained in given list.
  varName_in: [String!]

  # All values that are not contained in given list.
  varName_not_in: [String!]

  # All values less than the given value.
  varName_lt: String

  # All values less than or equal the given value.
  varName_lte: String

  # All values greater than the given value.
  varName_gt: String

  # All values greater than or equal the given value.
  varName_gte: String

  # All values containing the given string.
  varName_contains: String

  # All values not containing the given string.
  varName_not_contains: String

  # All values starting with the given string.
  varName_starts_with: String

  # All values not starting with the given string.
  varName_not_starts_with: String

  # All values ending with the given string.
  varName_ends_with: String

  # All values not ending with the given string.
  varName_not_ends_with: String
  questionResponse: QuestionResponseFilter
}

type UserCheckSubscriptionPayload {
  mutation: _ModelMutationType!
  node: UserCheck
  updatedFields: [String!]
  previousValues: UserCheckPreviousValues
}

input UserenrolledCoursesCourse {
  description: String
  dueDate: DateTime
  price: Int
  title: String!
  authorId: ID
  author: CourseauthorUser
  disciplineId: ID
  discipline: CoursedisciplineDiscipline
  subjectId: ID
  subject: CoursesubjectSubject
  analyticsIds: [ID!]
  analytics: [CourseanalyticsPrendusAnalytics!]
  assignmentsIds: [ID!]
  assignments: [CourseassignmentsAssignment!]
  enrolledStudentsIds: [ID!]
  enrolledStudents: [CourseenrolledStudentsUser!]
  purchasesIds: [ID!]
  purchases: [CoursepurchasesPurchase!]
}

type UserEssay implements Node {
  createdAt: DateTime!
  id: ID!
  questionResponse(filter: QuestionResponseFilter): QuestionResponse!
  updatedAt: DateTime!
  value: String!
  varName: String!
}

input UserEssayFilter {
  # Logical AND on all given filters.
  AND: [UserEssayFilter!]

  # Logical OR on all given filters.
  OR: [UserEssayFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  value: String

  # All values that are not equal to given value.
  value_not: String

  # All values that are contained in given list.
  value_in: [String!]

  # All values that are not contained in given list.
  value_not_in: [String!]

  # All values less than the given value.
  value_lt: String

  # All values less than or equal the given value.
  value_lte: String

  # All values greater than the given value.
  value_gt: String

  # All values greater than or equal the given value.
  value_gte: String

  # All values containing the given string.
  value_contains: String

  # All values not containing the given string.
  value_not_contains: String

  # All values starting with the given string.
  value_starts_with: String

  # All values not starting with the given string.
  value_not_starts_with: String

  # All values ending with the given string.
  value_ends_with: String

  # All values not ending with the given string.
  value_not_ends_with: String
  varName: String

  # All values that are not equal to given value.
  varName_not: String

  # All values that are contained in given list.
  varName_in: [String!]

  # All values that are not contained in given list.
  varName_not_in: [String!]

  # All values less than the given value.
  varName_lt: String

  # All values less than or equal the given value.
  varName_lte: String

  # All values greater than the given value.
  varName_gt: String

  # All values greater than or equal the given value.
  varName_gte: String

  # All values containing the given string.
  varName_contains: String

  # All values not containing the given string.
  varName_not_contains: String

  # All values starting with the given string.
  varName_starts_with: String

  # All values not starting with the given string.
  varName_not_starts_with: String

  # All values ending with the given string.
  varName_ends_with: String

  # All values not ending with the given string.
  varName_not_ends_with: String
  questionResponse: QuestionResponseFilter
}

enum UserEssayOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
  varName_ASC
  varName_DESC
}

type UserEssayPreviousValues {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  value: String!
  varName: String!
}

input UserEssayquestionResponseQuestionResponse {
  authorId: ID
  author: QuestionResponseauthorUser
  questionId: ID
  question: QuestionResponsequestionQuestion
  ratingsIds: [ID!]
  ratings: [QuestionResponseratingsQuestionResponseRating!]
  userChecksIds: [ID!]
  userChecks: [QuestionResponseuserChecksUserCheck!]
  userEssaysIds: [ID!]
  userEssays: [QuestionResponseuserEssaysUserEssay!]
  userInputsIds: [ID!]
  userInputs: [QuestionResponseuserInputsUserInput!]
  userRadiosIds: [ID!]
  userRadios: [QuestionResponseuserRadiosUserRadio!]
  userVariablesIds: [ID!]
  userVariables: [QuestionResponseuserVariablesUserVariable!]
}

input UserEssaySubscriptionFilter {
  # Logical AND on all given filters.
  AND: [UserEssaySubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [UserEssaySubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: UserEssaySubscriptionFilterNode
}

input UserEssaySubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  value: String

  # All values that are not equal to given value.
  value_not: String

  # All values that are contained in given list.
  value_in: [String!]

  # All values that are not contained in given list.
  value_not_in: [String!]

  # All values less than the given value.
  value_lt: String

  # All values less than or equal the given value.
  value_lte: String

  # All values greater than the given value.
  value_gt: String

  # All values greater than or equal the given value.
  value_gte: String

  # All values containing the given string.
  value_contains: String

  # All values not containing the given string.
  value_not_contains: String

  # All values starting with the given string.
  value_starts_with: String

  # All values not starting with the given string.
  value_not_starts_with: String

  # All values ending with the given string.
  value_ends_with: String

  # All values not ending with the given string.
  value_not_ends_with: String
  varName: String

  # All values that are not equal to given value.
  varName_not: String

  # All values that are contained in given list.
  varName_in: [String!]

  # All values that are not contained in given list.
  varName_not_in: [String!]

  # All values less than the given value.
  varName_lt: String

  # All values less than or equal the given value.
  varName_lte: String

  # All values greater than the given value.
  varName_gt: String

  # All values greater than or equal the given value.
  varName_gte: String

  # All values containing the given string.
  varName_contains: String

  # All values not containing the given string.
  varName_not_contains: String

  # All values starting with the given string.
  varName_starts_with: String

  # All values not starting with the given string.
  varName_not_starts_with: String

  # All values ending with the given string.
  varName_ends_with: String

  # All values not ending with the given string.
  varName_not_ends_with: String
  questionResponse: QuestionResponseFilter
}

type UserEssaySubscriptionPayload {
  mutation: _ModelMutationType!
  node: UserEssay
  updatedFields: [String!]
  previousValues: UserEssayPreviousValues
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String
  role: UserRole

  # All values that are not equal to given value.
  role_not: UserRole

  # All values that are contained in given list.
  role_in: [UserRole!]

  # All values that are not contained in given list.
  role_not_in: [UserRole!]
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  enrolledCourses_every: CourseFilter
  enrolledCourses_some: CourseFilter
  enrolledCourses_none: CourseFilter
  ltiUsers_every: LTIUserFilter
  ltiUsers_some: LTIUserFilter
  ltiUsers_none: LTIUserFilter
  ownedAssignments_every: AssignmentFilter
  ownedAssignments_some: AssignmentFilter
  ownedAssignments_none: AssignmentFilter
  ownedCourses_every: CourseFilter
  ownedCourses_some: CourseFilter
  ownedCourses_none: CourseFilter
  ownedQuestionResponseRatings_every: QuestionResponseRatingFilter
  ownedQuestionResponseRatings_some: QuestionResponseRatingFilter
  ownedQuestionResponseRatings_none: QuestionResponseRatingFilter
  ownedQuestionResponses_every: QuestionResponseFilter
  ownedQuestionResponses_some: QuestionResponseFilter
  ownedQuestionResponses_none: QuestionResponseFilter
  ownedQuestions_every: QuestionFilter
  ownedQuestions_some: QuestionFilter
  ownedQuestions_none: QuestionFilter
  ownedQuizzes_every: QuizFilter
  ownedQuizzes_some: QuizFilter
  ownedQuizzes_none: QuizFilter
  purchases_every: PurchaseFilter
  purchases_some: PurchaseFilter
  purchases_none: PurchaseFilter
  questionRatings_every: QuestionRatingFilter
  questionRatings_some: QuestionRatingFilter
  questionRatings_none: QuestionRatingFilter
  userAnalytics_every: PrendusAnalyticsFilter
  userAnalytics_some: PrendusAnalyticsFilter
  userAnalytics_none: PrendusAnalyticsFilter
}

type UserInput implements Node {
  createdAt: DateTime!
  id: ID!
  questionResponse(filter: QuestionResponseFilter): QuestionResponse!
  updatedAt: DateTime!
  value: String!
  varName: String!
}

input UserInputFilter {
  # Logical AND on all given filters.
  AND: [UserInputFilter!]

  # Logical OR on all given filters.
  OR: [UserInputFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  value: String

  # All values that are not equal to given value.
  value_not: String

  # All values that are contained in given list.
  value_in: [String!]

  # All values that are not contained in given list.
  value_not_in: [String!]

  # All values less than the given value.
  value_lt: String

  # All values less than or equal the given value.
  value_lte: String

  # All values greater than the given value.
  value_gt: String

  # All values greater than or equal the given value.
  value_gte: String

  # All values containing the given string.
  value_contains: String

  # All values not containing the given string.
  value_not_contains: String

  # All values starting with the given string.
  value_starts_with: String

  # All values not starting with the given string.
  value_not_starts_with: String

  # All values ending with the given string.
  value_ends_with: String

  # All values not ending with the given string.
  value_not_ends_with: String
  varName: String

  # All values that are not equal to given value.
  varName_not: String

  # All values that are contained in given list.
  varName_in: [String!]

  # All values that are not contained in given list.
  varName_not_in: [String!]

  # All values less than the given value.
  varName_lt: String

  # All values less than or equal the given value.
  varName_lte: String

  # All values greater than the given value.
  varName_gt: String

  # All values greater than or equal the given value.
  varName_gte: String

  # All values containing the given string.
  varName_contains: String

  # All values not containing the given string.
  varName_not_contains: String

  # All values starting with the given string.
  varName_starts_with: String

  # All values not starting with the given string.
  varName_not_starts_with: String

  # All values ending with the given string.
  varName_ends_with: String

  # All values not ending with the given string.
  varName_not_ends_with: String
  questionResponse: QuestionResponseFilter
}

enum UserInputOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
  varName_ASC
  varName_DESC
}

type UserInputPreviousValues {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  value: String!
  varName: String!
}

input UserInputquestionResponseQuestionResponse {
  authorId: ID
  author: QuestionResponseauthorUser
  questionId: ID
  question: QuestionResponsequestionQuestion
  ratingsIds: [ID!]
  ratings: [QuestionResponseratingsQuestionResponseRating!]
  userChecksIds: [ID!]
  userChecks: [QuestionResponseuserChecksUserCheck!]
  userEssaysIds: [ID!]
  userEssays: [QuestionResponseuserEssaysUserEssay!]
  userInputsIds: [ID!]
  userInputs: [QuestionResponseuserInputsUserInput!]
  userRadiosIds: [ID!]
  userRadios: [QuestionResponseuserRadiosUserRadio!]
  userVariablesIds: [ID!]
  userVariables: [QuestionResponseuserVariablesUserVariable!]
}

input UserInputSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [UserInputSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [UserInputSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: UserInputSubscriptionFilterNode
}

input UserInputSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  value: String

  # All values that are not equal to given value.
  value_not: String

  # All values that are contained in given list.
  value_in: [String!]

  # All values that are not contained in given list.
  value_not_in: [String!]

  # All values less than the given value.
  value_lt: String

  # All values less than or equal the given value.
  value_lte: String

  # All values greater than the given value.
  value_gt: String

  # All values greater than or equal the given value.
  value_gte: String

  # All values containing the given string.
  value_contains: String

  # All values not containing the given string.
  value_not_contains: String

  # All values starting with the given string.
  value_starts_with: String

  # All values not starting with the given string.
  value_not_starts_with: String

  # All values ending with the given string.
  value_ends_with: String

  # All values not ending with the given string.
  value_not_ends_with: String
  varName: String

  # All values that are not equal to given value.
  varName_not: String

  # All values that are contained in given list.
  varName_in: [String!]

  # All values that are not contained in given list.
  varName_not_in: [String!]

  # All values less than the given value.
  varName_lt: String

  # All values less than or equal the given value.
  varName_lte: String

  # All values greater than the given value.
  varName_gt: String

  # All values greater than or equal the given value.
  varName_gte: String

  # All values containing the given string.
  varName_contains: String

  # All values not containing the given string.
  varName_not_contains: String

  # All values starting with the given string.
  varName_starts_with: String

  # All values not starting with the given string.
  varName_not_starts_with: String

  # All values ending with the given string.
  varName_ends_with: String

  # All values not ending with the given string.
  varName_not_ends_with: String
  questionResponse: QuestionResponseFilter
}

type UserInputSubscriptionPayload {
  mutation: _ModelMutationType!
  node: UserInput
  updatedFields: [String!]
  previousValues: UserInputPreviousValues
}

input UserltiUsersLTIUser {
  lisPersonContactEmailPrimary: String!
  ltiUserId: String!
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserownedAssignmentsAssignment {
  numCreateQuestions: Int
  numGradeResponses: Int
  numResponseQuestions: Int
  numReviewQuestions: Int
  questionType: QuestionType
  title: String!
  courseId: ID
  course: AssignmentcourseCourse
  quizId: ID
  quiz: AssignmentquizQuiz
  analyticsIds: [ID!]
  analytics: [AssignmentanalyticsPrendusAnalytics!]
  conceptsIds: [ID!]
  concepts: [AssignmentconceptsConcept!]
  questionsIds: [ID!]
  questions: [AssignmentquestionsQuestion!]
}

input UserownedCoursesCourse {
  description: String
  dueDate: DateTime
  price: Int
  title: String!
  disciplineId: ID
  discipline: CoursedisciplineDiscipline
  subjectId: ID
  subject: CoursesubjectSubject
  analyticsIds: [ID!]
  analytics: [CourseanalyticsPrendusAnalytics!]
  assignmentsIds: [ID!]
  assignments: [CourseassignmentsAssignment!]
  enrolledStudentsIds: [ID!]
  enrolledStudents: [CourseenrolledStudentsUser!]
  purchasesIds: [ID!]
  purchases: [CoursepurchasesPurchase!]
}

input UserownedQuestionResponseRatingsQuestionResponseRating {
  questionResponseId: ID
  questionResponse: QuestionResponseRatingquestionResponseQuestionResponse
  scoresIds: [ID!]
  scores: [QuestionResponseRatingscoresCategoryScore!]
}

input UserownedQuestionResponsesQuestionResponse {
  questionId: ID
  question: QuestionResponsequestionQuestion
  ratingsIds: [ID!]
  ratings: [QuestionResponseratingsQuestionResponseRating!]
  userChecksIds: [ID!]
  userChecks: [QuestionResponseuserChecksUserCheck!]
  userEssaysIds: [ID!]
  userEssays: [QuestionResponseuserEssaysUserEssay!]
  userInputsIds: [ID!]
  userInputs: [QuestionResponseuserInputsUserInput!]
  userRadiosIds: [ID!]
  userRadios: [QuestionResponseuserRadiosUserRadio!]
  userVariablesIds: [ID!]
  userVariables: [QuestionResponseuserVariablesUserVariable!]
}

input UserownedQuestionsQuestion {
  code: String!
  conceptAlignment: Int
  difficulty: Int
  explanation: String
  inclusion: Int
  language: Int
  learningCategory: Int
  overall: Int
  plagiarism: Int
  resource: String
  text: String!
  visibility: QuestionVisibility
  assignmentId: ID
  assignment: QuestionassignmentAssignment
  conceptId: ID
  concept: QuestionconceptConcept
  quizId: ID
  quiz: QuestionquizQuiz
  analyticsIds: [ID!]
  analytics: [QuestionanalyticsPrendusAnalytics!]
  answerCommentsIds: [ID!]
  answerComments: [QuestionanswerCommentsAnswerComment!]
  flagsIds: [ID!]
  flags: [QuestionflagsQuestionFlag!]
  imagesIds: [ID!]
  images: [QuestionimagesFile!]
  ratingsIds: [ID!]
  ratings: [QuestionratingsQuestionRating!]
  responsesIds: [ID!]
  responses: [QuestionresponsesQuestionResponse!]
}

input UserownedQuizzesQuiz {
  title: String!
  assignmentId: ID
  assignment: QuizassignmentAssignment
  questionsIds: [ID!]
  questions: [QuizquestionsQuestion!]
}

type UserPreviousValues {
  createdAt: DateTime!
  email: String
  id: ID!
  password: String
  role: UserRole!
  updatedAt: DateTime!
}

input UserpurchasesPurchase {
  amount: Int!
  stripeTokenId: String!
  courseId: ID
  course: PurchasecourseCourse
}

input UserquestionRatingsQuestionRating {
  ratingJson: Json
  questionId: ID
  question: QuestionRatingquestionQuestion
  scoresIds: [ID!]
  scores: [QuestionRatingscoresCategoryScore!]
}

type UserRadio implements Node {
  checked: Boolean!
  createdAt: DateTime!
  id: ID!
  questionResponse(filter: QuestionResponseFilter): QuestionResponse!
  updatedAt: DateTime!
  varName: String!
}

input UserRadioFilter {
  # Logical AND on all given filters.
  AND: [UserRadioFilter!]

  # Logical OR on all given filters.
  OR: [UserRadioFilter!]
  checked: Boolean

  # All values that are not equal to given value.
  checked_not: Boolean
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  varName: String

  # All values that are not equal to given value.
  varName_not: String

  # All values that are contained in given list.
  varName_in: [String!]

  # All values that are not contained in given list.
  varName_not_in: [String!]

  # All values less than the given value.
  varName_lt: String

  # All values less than or equal the given value.
  varName_lte: String

  # All values greater than the given value.
  varName_gt: String

  # All values greater than or equal the given value.
  varName_gte: String

  # All values containing the given string.
  varName_contains: String

  # All values not containing the given string.
  varName_not_contains: String

  # All values starting with the given string.
  varName_starts_with: String

  # All values not starting with the given string.
  varName_not_starts_with: String

  # All values ending with the given string.
  varName_ends_with: String

  # All values not ending with the given string.
  varName_not_ends_with: String
  questionResponse: QuestionResponseFilter
}

enum UserRadioOrderBy {
  checked_ASC
  checked_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  varName_ASC
  varName_DESC
}

type UserRadioPreviousValues {
  checked: Boolean!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  varName: String!
}

input UserRadioquestionResponseQuestionResponse {
  authorId: ID
  author: QuestionResponseauthorUser
  questionId: ID
  question: QuestionResponsequestionQuestion
  ratingsIds: [ID!]
  ratings: [QuestionResponseratingsQuestionResponseRating!]
  userChecksIds: [ID!]
  userChecks: [QuestionResponseuserChecksUserCheck!]
  userEssaysIds: [ID!]
  userEssays: [QuestionResponseuserEssaysUserEssay!]
  userInputsIds: [ID!]
  userInputs: [QuestionResponseuserInputsUserInput!]
  userRadiosIds: [ID!]
  userRadios: [QuestionResponseuserRadiosUserRadio!]
  userVariablesIds: [ID!]
  userVariables: [QuestionResponseuserVariablesUserVariable!]
}

input UserRadioSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [UserRadioSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [UserRadioSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: UserRadioSubscriptionFilterNode
}

input UserRadioSubscriptionFilterNode {
  checked: Boolean

  # All values that are not equal to given value.
  checked_not: Boolean
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  varName: String

  # All values that are not equal to given value.
  varName_not: String

  # All values that are contained in given list.
  varName_in: [String!]

  # All values that are not contained in given list.
  varName_not_in: [String!]

  # All values less than the given value.
  varName_lt: String

  # All values less than or equal the given value.
  varName_lte: String

  # All values greater than the given value.
  varName_gt: String

  # All values greater than or equal the given value.
  varName_gte: String

  # All values containing the given string.
  varName_contains: String

  # All values not containing the given string.
  varName_not_contains: String

  # All values starting with the given string.
  varName_starts_with: String

  # All values not starting with the given string.
  varName_not_starts_with: String

  # All values ending with the given string.
  varName_ends_with: String

  # All values not ending with the given string.
  varName_not_ends_with: String
  questionResponse: QuestionResponseFilter
}

type UserRadioSubscriptionPayload {
  mutation: _ModelMutationType!
  node: UserRadio
  updatedFields: [String!]
  previousValues: UserRadioPreviousValues
}

enum UserRole {
  INSTRUCTOR
  STUDENT
  ADMIN
}

input UserSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [UserSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [UserSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: UserSubscriptionFilterNode
}

input UserSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String
  role: UserRole

  # All values that are not equal to given value.
  role_not: UserRole

  # All values that are contained in given list.
  role_in: [UserRole!]

  # All values that are not contained in given list.
  role_not_in: [UserRole!]
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  enrolledCourses_every: CourseFilter
  enrolledCourses_some: CourseFilter
  enrolledCourses_none: CourseFilter
  ltiUsers_every: LTIUserFilter
  ltiUsers_some: LTIUserFilter
  ltiUsers_none: LTIUserFilter
  ownedAssignments_every: AssignmentFilter
  ownedAssignments_some: AssignmentFilter
  ownedAssignments_none: AssignmentFilter
  ownedCourses_every: CourseFilter
  ownedCourses_some: CourseFilter
  ownedCourses_none: CourseFilter
  ownedQuestionResponseRatings_every: QuestionResponseRatingFilter
  ownedQuestionResponseRatings_some: QuestionResponseRatingFilter
  ownedQuestionResponseRatings_none: QuestionResponseRatingFilter
  ownedQuestionResponses_every: QuestionResponseFilter
  ownedQuestionResponses_some: QuestionResponseFilter
  ownedQuestionResponses_none: QuestionResponseFilter
  ownedQuestions_every: QuestionFilter
  ownedQuestions_some: QuestionFilter
  ownedQuestions_none: QuestionFilter
  ownedQuizzes_every: QuizFilter
  ownedQuizzes_some: QuizFilter
  ownedQuizzes_none: QuizFilter
  purchases_every: PurchaseFilter
  purchases_some: PurchaseFilter
  purchases_none: PurchaseFilter
  questionRatings_every: QuestionRatingFilter
  questionRatings_some: QuestionRatingFilter
  questionRatings_none: QuestionRatingFilter
  userAnalytics_every: PrendusAnalyticsFilter
  userAnalytics_some: PrendusAnalyticsFilter
  userAnalytics_none: PrendusAnalyticsFilter
}

type UserSubscriptionPayload {
  mutation: _ModelMutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UseruserAnalyticsPrendusAnalytics {
  contextId: String
  contextType: ContextType
  object: String
  verb: String!
  assignmentId: ID
  assignment: PrendusAnalyticsassignmentAssignment
  courseId: ID
  course: PrendusAnalyticscourseCourse
  questionId: ID
  question: PrendusAnalyticsquestionQuestion
}

type UserVariable implements Node {
  createdAt: DateTime!
  id: ID!
  questionResponse(filter: QuestionResponseFilter): QuestionResponse!
  updatedAt: DateTime!
  value: Float!
  varName: String!
}

input UserVariableFilter {
  # Logical AND on all given filters.
  AND: [UserVariableFilter!]

  # Logical OR on all given filters.
  OR: [UserVariableFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  value: Float

  # All values that are not equal to given value.
  value_not: Float

  # All values that are contained in given list.
  value_in: [Float!]

  # All values that are not contained in given list.
  value_not_in: [Float!]

  # All values less than the given value.
  value_lt: Float

  # All values less than or equal the given value.
  value_lte: Float

  # All values greater than the given value.
  value_gt: Float

  # All values greater than or equal the given value.
  value_gte: Float
  varName: String

  # All values that are not equal to given value.
  varName_not: String

  # All values that are contained in given list.
  varName_in: [String!]

  # All values that are not contained in given list.
  varName_not_in: [String!]

  # All values less than the given value.
  varName_lt: String

  # All values less than or equal the given value.
  varName_lte: String

  # All values greater than the given value.
  varName_gt: String

  # All values greater than or equal the given value.
  varName_gte: String

  # All values containing the given string.
  varName_contains: String

  # All values not containing the given string.
  varName_not_contains: String

  # All values starting with the given string.
  varName_starts_with: String

  # All values not starting with the given string.
  varName_not_starts_with: String

  # All values ending with the given string.
  varName_ends_with: String

  # All values not ending with the given string.
  varName_not_ends_with: String
  questionResponse: QuestionResponseFilter
}

enum UserVariableOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
  varName_ASC
  varName_DESC
}

type UserVariablePreviousValues {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  value: Float!
  varName: String!
}

input UserVariablequestionResponseQuestionResponse {
  authorId: ID
  author: QuestionResponseauthorUser
  questionId: ID
  question: QuestionResponsequestionQuestion
  ratingsIds: [ID!]
  ratings: [QuestionResponseratingsQuestionResponseRating!]
  userChecksIds: [ID!]
  userChecks: [QuestionResponseuserChecksUserCheck!]
  userEssaysIds: [ID!]
  userEssays: [QuestionResponseuserEssaysUserEssay!]
  userInputsIds: [ID!]
  userInputs: [QuestionResponseuserInputsUserInput!]
  userRadiosIds: [ID!]
  userRadios: [QuestionResponseuserRadiosUserRadio!]
  userVariablesIds: [ID!]
  userVariables: [QuestionResponseuserVariablesUserVariable!]
}

input UserVariableSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [UserVariableSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [UserVariableSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: UserVariableSubscriptionFilterNode
}

input UserVariableSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  value: Float

  # All values that are not equal to given value.
  value_not: Float

  # All values that are contained in given list.
  value_in: [Float!]

  # All values that are not contained in given list.
  value_not_in: [Float!]

  # All values less than the given value.
  value_lt: Float

  # All values less than or equal the given value.
  value_lte: Float

  # All values greater than the given value.
  value_gt: Float

  # All values greater than or equal the given value.
  value_gte: Float
  varName: String

  # All values that are not equal to given value.
  varName_not: String

  # All values that are contained in given list.
  varName_in: [String!]

  # All values that are not contained in given list.
  varName_not_in: [String!]

  # All values less than the given value.
  varName_lt: String

  # All values less than or equal the given value.
  varName_lte: String

  # All values greater than the given value.
  varName_gt: String

  # All values greater than or equal the given value.
  varName_gte: String

  # All values containing the given string.
  varName_contains: String

  # All values not containing the given string.
  varName_not_contains: String

  # All values starting with the given string.
  varName_starts_with: String

  # All values not starting with the given string.
  varName_not_starts_with: String

  # All values ending with the given string.
  varName_ends_with: String

  # All values not ending with the given string.
  varName_not_ends_with: String
  questionResponse: QuestionResponseFilter
}

type UserVariableSubscriptionPayload {
  mutation: _ModelMutationType!
  node: UserVariable
  updatedFields: [String!]
  previousValues: UserVariablePreviousValues
}

